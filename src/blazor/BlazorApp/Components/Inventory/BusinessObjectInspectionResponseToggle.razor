@inject ITranslator<BusinessObjectInspectionResponseToggle> Translator

<button class="btn btn-block text-left @(
                IsOverdue() 
                    ? "btn-outline-danger" 
                    : IsCurrent() 
                        ? "btn-outline-warning" 
                        : IsUpcomming() 
                            ? "btn-outline-success"
                            : "btn-outline-secondary")"

        @onclick="() => Toggle()">@Inspection.InspectionDisplayName</button>

@if (_isExpanded)
{
    <div class="card card-body text-wrap">
        @if (HasTimestamps())
        {
            <ul class="list-unstyled">
                @if (IsAuditted())
                {
                    <li>
                        <small class="text-nowrap">@GetAuditString()</small>
                    </li>
                }
                @if (IsScheduled())
                {
                    <li>
                        <small class="text-nowrap @(
                                        IsOverdue() 
                                            ? "text-danger font-weight-bold" 
                                            : IsCurrent() 
                                                ? "text-warning" 
                                                : IsUpcomming() 
                                                    ? "text-success"
                                                    : "")">@GetScheduledString()</small>
                    </li>
                }
            </ul>
        }
        <span>
            @Inspection.InspectionText
        </span>
    </div>
}

@code {

    [Parameter]
    public BusinessObjectInspectionResponse Inspection { get; set; } = null!;

    private bool _isExpanded = false;

    private void Toggle()
    {
        if (CanToggle())
        {
            _isExpanded =!_isExpanded;
        }
    }

    private bool IsAuditted()
        => Inspection.AuditDate != default;

    private bool IsOverdue()
    {
        if (IsScheduled())
        {
            var appointments = Inspection.AuditSchedule.Appointments.FirstOrDefault();
            if (appointments == null)
            {
                return false;
            }

            var auditDelay = new DateTimeNumbers(appointments.PlannedAuditDate, appointments.PlannedAuditTime)
                .ToGlobalDateTime()
                .AddMilliseconds(Inspection.AuditSchedule.Threshold);

            return auditDelay < DateTime.UtcNow;
        }
        return false;
    }

    private bool IsScheduled()
        => Inspection.AuditSchedule.Appointments.Any();

    private bool IsCurrent()
    {
        if (IsScheduled())
        {
            var appointment = Inspection.AuditSchedule.Appointments.FirstOrDefault();
            if (appointment == null)
            {
                return false;
            }

            var plannedAudit = new DateTimeNumbers(appointment.PlannedAuditDate, appointment.PlannedAuditTime)
                .ToGlobalDateTime();

            return plannedAudit < DateTime.UtcNow;
        }
        return false;
    }

    private bool IsUpcomming()
    {
        if (IsScheduled())
        {
            var appointment = Inspection.AuditSchedule.Appointments.FirstOrDefault();
            if (appointment == null)
            {
                return false;
            }

            var upcomingAudit = new DateTimeNumbers(appointment.PlannedAuditDate, appointment.PlannedAuditTime)
                .ToGlobalDateTime()
                .AddMilliseconds(-Inspection.AuditSchedule.Threshold);

            return upcomingAudit < DateTime.UtcNow;
        }
        return false;
    }

    private bool HasTimestamps()
        => IsScheduled() || IsAuditted();

    private bool CanToggle()
        => HasTimestamps() || !string.IsNullOrWhiteSpace(Inspection.InspectionText);

    private string GetAuditString()
    {
        var audit = new DateTimeNumbers(Inspection.AuditDate, Inspection.AuditTime).ToLocalDateTimeString();
        return Translator[$"{audit} (last audit)"];
    }

    private string GetScheduledString()
    {
        var appointment = Inspection.AuditSchedule.Appointments.FirstOrDefault();

        if(appointment == null)
        {
            return string.Empty;
        }

        var plannedAudit = new DateTimeNumbers(appointment.PlannedAuditDate, appointment.PlannedAuditTime).ToLocalDateTimeString();
        return Translator[$"{plannedAudit} (next audit)"];
    }
}
