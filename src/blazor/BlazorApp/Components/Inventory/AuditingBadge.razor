@inject IInspectorHandler InspectorHandler

@implements IDisposable

@if (_auditingCount > 0)
{
    <span class="badge @(_auditingDelayed ? "badge-danger" : "badge-success") ml-2">@_auditingCount</span>
}

@code {

    private IDisposable? _inspectorBusinessObjectCreation;
    private IDisposable? _inspectorBusinessObjectUpdate;
    private IDisposable? _inspectorBusinessObjectDeletion;

    private long _auditingCount;
    private bool _auditingDelayed;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _inspectorBusinessObjectCreation = await InspectorHandler.OnBusinessObjectCreationAsync(OnBusinessObjectCreationAsync);
            _inspectorBusinessObjectUpdate = await InspectorHandler.OnBusinessObjectUpdateAsync(OnBusinessObjectUpdateAsync);
            _inspectorBusinessObjectDeletion = await InspectorHandler.OnBusinessObjectDeletionAsync(OnBusinessObjectDeletionAsync);
        }
    }

    protected override async Task OnParametersSetAsync()
    {          
        await CountAsync();
    }

    public void Dispose()
    {
        _inspectorBusinessObjectCreation?.Dispose();
        _inspectorBusinessObjectUpdate?.Dispose();
        _inspectorBusinessObjectDeletion?.Dispose();
    }

    public async Task CountAsync()
    {
        _auditingCount = 0;
        _auditingDelayed = false;

        var user = (await AuthenticationState).User;

        if (user.Identity!.IsAuthenticated && user.HasInspector())
        {
            var inspector = await InspectorHandler.GetCurrentAsync();

            foreach (var businessObject in inspector.BusinessObjects)
            {
                if (businessObject.AuditScheduleDelayed) {
                    _auditingDelayed = true;
                }

                if (businessObject.AuditScheduleDelayed || 
                    businessObject.AuditSchedulePending) {
                    _auditingCount++;
                }
            }
        }
        StateHasChanged();
    }

    public Task OnBusinessObjectCreationAsync(string _, InspectorBusinessObjectResponse __)
        => InvokeAsync(CountAsync);

    public Task OnBusinessObjectUpdateAsync(string _, InspectorBusinessObjectResponse __)
        => InvokeAsync(CountAsync);

    public Task OnBusinessObjectDeletionAsync(string _, string __)
        => InvokeAsync(CountAsync);
}
