@if (_avatar != null)
{
    <img id="avatar" class="rounded-circle @CssClass" height="@Size" width="@Size" src="@_avatar" />
}

@inject IFileBlobHandler FileBlobHandler

@code {

    private string? _avatar;

    [Parameter]
    public IBrowserFile? Src { get; set; } = null;

    [Parameter]
    public string Inspector { get; set; } = "me";

    [Parameter]
    public int Size { get; set; } = 32;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    [Parameter]
    public string CssClass { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        await GenerateAvatarAsync();
        await base.OnParametersSetAsync();
    }

    private async Task GenerateAvatarAsync()
    {
        using var avatarStream = GetFromSrc() ?? await GetFromFileBlobHandlerAsync();

        if (avatarStream == null)
        {
            return;
        }

        using var memoryStream = new MemoryStream();

        await avatarStream.CopyToAsync(memoryStream);

        var imageBytes = memoryStream.ToArray();
        var imageSrc = Convert.ToBase64String(imageBytes);
        _avatar = string.Format("data:image/jpg;base64,{0}", imageSrc);
    }

    private async Task<Stream?> GetFromFileBlobHandlerAsync()
    {
        var user = (await AuthenticationState).User;

        if (user.GetAuthorizations().Any())
        {
            return await FileBlobHandler.ReadAsync($"inspectors/{Inspector}", "avatar");
        }

        return null;
    }

    private Stream? GetFromSrc()
    {
        if (Src != null)
        {
            return Src.OpenReadStream();
        }

        return null;
    }

}
