@inject INotificationCallbackHandler NotificationCallbackHandler
@inject INotificationRequestHandler NotificationRequestHandler

@implements IDisposable

@if (_notificationCount > 0)
{
    <span class="badge bg-danger ml-2">@_notificationCount</span>
}

@code {
private IDisposable? _notificationCreation;
private IDisposable? _notificationDeletion;

private long _notificationCount;

[CascadingParameter]
public Task<AuthenticationState> AuthenticationState { get; set; } = null!;

protected override async Task OnAfterRenderAsync(bool firstRender)
{
    if (firstRender)
    {
        _notificationCreation = await NotificationCallbackHandler.OnCreationAsync(OnNotificationCreationAsync);
        _notificationDeletion = await NotificationCallbackHandler.OnDeletionAsync(OnNotificationDeletionAsync);

        await CountAsync();
    }
}

public async Task CountAsync()
{
    _notificationCount = 0;

    var user = (await AuthenticationState).User;

    if (user.IsAuthenticatedInspector())
    {
        await foreach (var _ in NotificationRequestHandler.GetAllForInspector(user.Claims.GetInspector()))
        {
            _notificationCount++;
        }
    }
    StateHasChanged();
}

public Task OnNotificationCreationAsync(NotificationResponse _)
    => InvokeAsync(CountAsync);

public Task OnNotificationDeletionAsync(string _, int __, int ___)
    => InvokeAsync(CountAsync);

public void Dispose()
{
    _notificationCreation?.Dispose();
    _notificationDeletion?.Dispose();
}

}
