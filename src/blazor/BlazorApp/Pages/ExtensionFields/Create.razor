@page "/extensions/{aggregateType}/fields/create"

@inject ITranslator<Create> Translator
@inject NavigationManager NavigationManager
@inject IExtensionHandler ExtensionHandler

@attribute [Authorize("ManagementRead")]

<div class="container-fluid">
    <h1>@Translator[$"Create extension field"]</h1>
</div>

<EditForm Model="@_request" OnValidSubmit="@OnValidSubmitAsync">
    <DataAnnotationsValidator />

    <div class="container-fluid">
        <div class="form-group">
            <label>@Translator[$"Unique name"]</label>
            <InputText class="form-control"
                       id="extensionFieldUniqueName" @bind-Value="_request.UniqueName" />
        </div>
        <div class="form-group">
            <label>@Translator[$"Display name"]</label>
            <InputText class="form-control"
                       id="extensionFieldDisplayName" @bind-Value="_request.DisplayName" />
        </div>
        <div class="form-group">
            <label>@Translator[$"Data name"]</label>
            <InputText class="form-control"
                       id="extensionFieldDataName" @bind-Value="_request.DataName" />
        </div>
        <div class="form-group">
            <label>@Translator[$"Data type"]</label>
            <InputText class="form-control"
                       id="extensionFieldDataType" @bind-Value="_request.DataType" />
        </div>
    </div>

    @if(context.GetValidationMessages().Any())
    {
        <div class="container-fluid">
            <div class="card card-body tex-wrap">
                <ValidationSummary />    
            </div>
        </div>
    } 
    else 
    {
        <div class="container-fluid">
            <AuthorizedButton Policy="ManagementFull" 
                id="submit"
                type="submit"
                class="btn btn-primary">@Translator[$"Submit"]</AuthorizedButton>
        </div>
    }

</EditForm>

@code {

    [Parameter]
    public string AggregateType { get; set; } = string.Empty;

    private ExtensionFieldRequest _request = new ExtensionFieldRequest();

    private async Task OnValidSubmitAsync()
    {
        await ExtensionHandler.CreateFieldAsync(AggregateType, _request);
        NavigationManager.NavigateTo("/extensions");
    }
}