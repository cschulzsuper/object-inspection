@page "/business-objects/auditing"

@inject ITranslator<View> Translator
@inject NavigationManager NavigationManager
@inject IInspectorCallbackHandler InspectorCallbackHandler
@inject IInspectorRequestHandler InspectorRequestHandler

@implements IAsyncDisposable

@attribute [Authorize("OnlyInspectorOrObserver")]

<PageTitle>@Translator[$"Auditing"]</PageTitle>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">@Translator[$"Auditing"]</h1>
</div>

<DemoNote>
    @Translator.Markdown($"The auditing shows the business objects of an inspector. Indicators could be shown if schedules are provided and overdue.")
</DemoNote>

<div class="table-responsive">

    @if (_businessObjects == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped table-sm">

            <thead>
            <tr>
                <th scope="col" class="col-12 col-md-4">@Translator[$"Business object"]</th>
                <th scope="col" class="col-4 d-none d-md-table-cell">@Translator[$"Planned audit time"]</th>
                <th scope="col" class="col-4 d-none d-md-table-cell">@Translator[$"Unique name"]</th>
                <th scope="col"></th>
            </tr>
            </thead>

            <tbody>
            @foreach (var businessObject in _businessObjects)
        {
            <tr class="@TableRowCss(businessObject)">
                    <td>
                        <div>@businessObject.DisplayName</div><small class="d-md-none">@PlannedAuditTime(businessObject)</small></td>
                    <td class="d-none d-md-table-cell">@PlannedAuditTime(businessObject)</td>
                    <td class="d-none d-md-table-cell">@businessObject.UniqueName</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary btn-block" title="@Translator[$"Audit"]"
                                @onclick="() => NavigateToInspectionAudit(businessObject.UniqueName)"><span class="oi oi-media-play"/></button>
                    </td>
                </tr>
        }
            </tbody>

        </table>
}

</div>

@code {

private ICollection<InspectorBusinessObjectResponse>? _businessObjects = null;

private IDisposable? _inspectorBusinessObjectCreation;
private IDisposable? _inspectorBusinessObjectUpdate;
private IDisposable? _inspectorBusinessObjectDeletion;

protected override async Task OnParametersSetAsync()
{
    await QueryAsync();
}

protected override async Task OnAfterRenderAsync(bool firstRender)
{
    if (firstRender)
    {
        _inspectorBusinessObjectCreation = await InspectorCallbackHandler.OnBusinessObjectCreationAsync(OnBusinessObjectCreation);
        _inspectorBusinessObjectUpdate = await InspectorCallbackHandler.OnBusinessObjectUpdateAsync(OnBusinessObjectUpdate);
        _inspectorBusinessObjectDeletion = await InspectorCallbackHandler.OnBusinessObjectDeletionAsync(OnBusinessObjectDeletion);
    }
}

public Task OnBusinessObjectCreation(string _, InspectorBusinessObjectResponse __)
    => InvokeAsync(QueryAsync);

public Task OnBusinessObjectUpdate(string _, InspectorBusinessObjectResponse __)
    => InvokeAsync(QueryAsync);

public Task OnBusinessObjectDeletion(string _, string __)
    => InvokeAsync(QueryAsync);

private string TableRowCss(InspectorBusinessObjectResponse businessObject)
{
    if (businessObject.AuditScheduleDelayed)
    {
        return "text-danger font-weight-bold";
    }

    if (businessObject.AuditSchedulePending)
    {
        return "text-success font-weight-bold";
    }

    return string.Empty;
}

private string PlannedAuditTime(InspectorBusinessObjectResponse businessObject)
{
    if (businessObject.AuditSchedulePlannedAuditDate == default &&
        businessObject.AuditSchedulePlannedAuditTime == default)
    {
        return string.Empty;
    }

    return new DateTimeNumbers(businessObject.AuditSchedulePlannedAuditDate, businessObject.AuditSchedulePlannedAuditTime)
        .ToLocalDateTimeString();
}

public async Task QueryAsync()
{
    var response = await InspectorRequestHandler.GetCurrentAsync();

    _businessObjects = response.BusinessObjects
        .OrderBy(x => x.AuditSchedulePlannedAuditDate)
        .ThenBy(x => x.AuditSchedulePlannedAuditTime)
        .ToList();

    StateHasChanged();
}

public async ValueTask DisposeAsync()
{
    _inspectorBusinessObjectCreation?.Dispose();
    _inspectorBusinessObjectUpdate?.Dispose();
    _inspectorBusinessObjectDeletion?.Dispose();

    await ValueTask.CompletedTask;
}

public void NavigateToInspections(string businessObject)
    => NavigationManager.NavigateTo($"/business-objects/{businessObject}/inspections");

public void NavigateToInspectionAudit(string businessObject)
    => NavigationManager.NavigateTo($"/business-objects/{businessObject}/audit");

}