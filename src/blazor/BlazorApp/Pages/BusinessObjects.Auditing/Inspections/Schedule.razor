@page "/business-objects/{businessObject}/inspections/{inspection}/schedule"

@inject ITranslator<Schedule> Translator
@inject NavigationManager NavigationManager
@inject IBusinessObjectInspectionRequestHandler BusinessObjectInspectionHandler

@attribute [Authorize("ManagementRead")]

<PageTitle>@Translator[$"Schedule inspection"]</PageTitle>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">@Translator[$"Schedule inspection"]</h1>
</div>

@if (_request == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@_request" OnValidSubmit="@OnValidSubmitAsync">
        <DataAnnotationsValidator/>

        <div class="container-fluid pb-3 mb-3 border-bottom">
            <div class="form-floating mt-3">
                <InputText class="form-control" id="schedule" @bind-Value="_request.Schedule"/>
                <label for="schedule">@Translator[$"Audit schedule"]</label>
            </div>
            <div class="form-floating mt-3">
                <InputMilliseconds class="form-control" id="threshold" @bind-Value="_request.Threshold" step="1"/>
                <label for="threshold">@Translator[$"Upcoming audit threshold"] (@TimeSpan.FromMilliseconds(_request.Threshold).ToString("c"))</label>
            </div>
        </div>

        @if (context.GetValidationMessages().Any())
        {
            <div class="container-fluid pb-4 mb-5">
                <div class="card card-body tex-wrap">
                    <ValidationSummary/>
                </div>
            </div>
        }
        else
        {
            <div class="container-fluid pb-4 mb-5">
                <AuthorizedButton Policy="ManagementFull" id="submit" type="submit" class="btn btn-sm btn-primary">@Translator[$"Submit"]</AuthorizedButton>
            </div>
        }

    </EditForm>
}

@code {

    [Parameter]
    public string BusinessObject { get; set; } = string.Empty;

    [Parameter]
    public string Inspection { get; set; } = string.Empty;

    private BusinessObjectInspectionAuditScheduleRequest? _request = null;

    protected override async Task OnInitializedAsync()
    {
        var response = await BusinessObjectInspectionHandler.GetAsync(BusinessObject, Inspection);

        if (response != null)
        {
            var expression = response.AuditSchedule.Expressions.FirstOrDefault();

            _request = new BusinessObjectInspectionAuditScheduleRequest
            {
                Threshold = response.AuditSchedule.Threshold,
                Schedule = expression?.CronExpression ?? string.Empty,
                ETag = response.ETag
            };
        }
    }

    private async Task OnValidSubmitAsync()
    {
        await BusinessObjectInspectionHandler.ReplaceAuditScheduleAsync(BusinessObject, Inspection, _request!);
        NavigationManager.NavigateTo($"/business-objects/{BusinessObject}/inspections");
    }

}