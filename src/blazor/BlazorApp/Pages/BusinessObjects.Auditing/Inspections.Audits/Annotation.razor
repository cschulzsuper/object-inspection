@page "/business-objects/{businessObject}/inspections/{inspection}/annotation"

@inject ITranslator<Annotation> Translator
@inject NavigationManager NavigationManager
@inject IBusinessObjectInspectionRequestHandler BusinessObjectInspectionHandler

@attribute [Authorize("OnlyInspectorOrObserver")]

<PageTitle>@Translator[$"Annotate audit"]</PageTitle>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">@Translator[$"Annotate audit"]</h1>
</div>

@if (_inspection == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@_inspection" OnValidSubmit="@OnValidSubmitAsync">
        <DataAnnotationsValidator/>

        <div class="container-fluid pb-3 mb-3 border-bottom">
            <div class="form-floating mt-3">
                <InputText class="form-control" id="inspectionDisplayName" @bind-Value="_inspection.InspectionDisplayName" readonly />
                <label for="inspectionDisplayName">@Translator[$"Display name"]</label>
            </div>
            <div class="form-floating mt-3">
                <InputText class="form-control" id="auditResult" @bind-Value="_inspection.AuditResult" readonly />
                <label for="auditResult">@Translator[$"Audit result"]</label>
            </div>
            <div class="form-floating mt-3">
                <InputTextArea class="form-control text-area" id="auditAnnotation" @bind-Value="_inspection.AuditAnnotation"/>
                <label for="auditAnnotation">@Translator[$"Annotation"]</label>
            </div>
        </div>

        @if (context.GetValidationMessages().Any())
    {
        <div class="container-fluid pb-4 mb-5">
                <div class="card card-body tex-wrap">
                    <ValidationSummary/>
                </div>
            </div>
    }
    else
    {
        <div class="container-fluid pb-4 mb-5">
                <AuthorizedButton Policy="OnlyInspectorOrObserver"
                                  id="submit"
                                  type="submit"
                                  class="btn btn-sm btn-primary">@Translator[$"Submit"]</AuthorizedButton>
            </div>
    }

    </EditForm>
}

@code {

[Parameter]
public string BusinessObject { get; set; } = string.Empty;

[Parameter]
public string Inspection { get; set; } = string.Empty;

[Parameter]
public int AuditDate { get; set; }

[Parameter]
public int AuditTime { get; set; }

private BusinessObjectInspectionResponse? _inspection = null;

protected override async Task OnAfterRenderAsync(bool firstRender)
{
    if (firstRender)
    {
        _inspection = await BusinessObjectInspectionHandler.GetAsync(BusinessObject, Inspection);
        StateHasChanged();
    }
}

private async Task OnValidSubmitAsync()
{
    await BusinessObjectInspectionHandler.ReplaceAuditAnnotationAsync(BusinessObject, Inspection,
        new BusinessObjectInspectionAuditAnnotationRequest
        {
            Annotation = _inspection!.AuditAnnotation,
            ETag = _inspection.ETag
        });
    NavigationManager.NavigateTo($"/business-objects/{BusinessObject}/audit");
}

}