@page "/organizations"

@inject ITranslator Translator
@inject NavigationManager NavigationManager
@inject IOrganizationHandler OrganizationHandler
@inject AppAuthentication AppAuthentication

@attribute [Authorize("Maintainer")]

<div class="container-fluid">
    <h1>@Translator["Organizations"]</h1>
</div>

<div class="container-fluid m-2">
    <button class="btn btn-primary"
            @onclick="Create"><span class="oi oi-plus"/></button>
</div>

<div class="container-fluid">
@if (_organizations == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-sm">
        <thead>
            <tr>
                <th class="col-2">@Translator["Unique name"]</th>
                <th class="col-3">@Translator["Display name"]</th>
                <th class="col-3">@Translator["Chief inspector"]</th>
                <th class="col-1"></th>
                <th class="col-1"></th>
                <th class="col-1"></th>
                <th class="col-1"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var organization in _organizations.Values)
            {
                <tr>
                    <td class="col-2">@organization.UniqueName</td>
                    <td class="col-3">@organization.DisplayName</td>
                    <td class="col-3">@organization.ChiefInspector</td>
                    @if(organization.Activated) {
                        <td class="col-1">
                            @if (organization.UniqueName != AppAuthentication.Organization)
                            {
                                <button class="btn btn-success btn-block" 
                                    @onclick="() => DeactivateAsync(organization.UniqueName)"><span class="oi oi-power-standby"/></button>
                            }
                        </td>
                    } else {
                        <td class="col-1">
                            @if (organization.UniqueName != AppAuthentication.Organization)
                            {

                                <button class="btn btn-outline-danger btn-block" 
                                    @onclick="() => ActivateAsync(organization.UniqueName)"><span class="oi oi-power-standby"/></button>
                            }
                        </td>
                    }
                    <td class="col-1">
                        <button class="btn btn-outline-info btn-block" 
                            @onclick="() => Edit(organization.UniqueName)"><span class="oi oi-pencil"/></button>
                    </td>
                    <td class="col-1">
                        @if (organization.UniqueName != AppAuthentication.Organization)
                        {
                            <button class="btn btn-outline-danger btn-block" 
                                @onclick="() => DeleteAsync(organization.UniqueName)"><span class="oi oi-trash"/></button>
                        }
                    </td>
                    <td class="col-1">
                        <button class="btn btn-outline-danger btn-block" 
                            @onclick="() => NavigateToInspectors(organization.UniqueName)"><span class="oi oi-person"/></button>
                    </td>
                    
                </tr>
            }
        </tbody>
    </table>
}
</div>

@code {

    private IDictionary<string,OrganizationResponse>? _organizations;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _organizations = new Dictionary<string, OrganizationResponse>();

            await foreach (var organization in OrganizationHandler.GetAll())
            {
                _organizations.Add(organization.UniqueName, organization);
                StateHasChanged();
            }

            StateHasChanged();
        }
    }

    public void Create()
        => NavigationManager.NavigateTo("/organizations/create");

    public async Task DeleteAsync(string organization) {
        await OrganizationHandler.DeleteAsync(organization);
        _organizations!.Remove(organization);
    }

    public async Task ActivateAsync(string organization) {
         await OrganizationHandler.ActivateAsync(organization);
         _organizations![organization].Activated = true;
    }

    public async Task DeactivateAsync(string organization) 
    {
        await OrganizationHandler.DeactivateAsync(organization);
         _organizations![organization].Activated = false;
    }
    
    public void Edit(string organization)
        => NavigationManager.NavigateTo($"/organizations/{organization}/edit/");

    public void NavigateToInspectors(string organization)
        => NavigationManager.NavigateTo($"/organizations/{organization}/inspectors");

}