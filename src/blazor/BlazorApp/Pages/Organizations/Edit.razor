@page "/organizations/{organization}/edit/"

@inject ITranslator Translator
@inject NavigationManager NavigationManager
@inject IOrganizationHandler OrganizationHandler
@inject IAccountHandler AccountHandler
@inject AppState AppState

@attribute [Authorize("Maintainer")]

<div class="container mt-2 mt-md-3">
    <h1>@Translator["Edit organization"]</h1>
</div>

@if (_request == null)
{
    <p><em>Loading...</em></p>
}
else 
{
    <EditForm Model="@_request" OnValidSubmit="@OnValidSubmitAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="container mt-2 mt-md-3">
            <div class="form-group">
                <label>@Translator["Unique name"]</label>
                <InputText class="form-control" id="uniqueName" @bind-Value="_request.UniqueName" readonly />
            </div>
            <div class="form-group">
                <label>@Translator["Display name"]</label>
                <InputText class="form-control" id="displayName" @bind-Value="_request.DisplayName" />
            </div>
            <div class="form-group">
                <label>@Translator["Chief inspector"]</label>
                <InputText class="form-control" id="chiefInspector" @bind-Value="_request.ChiefInspector" />
            </div>
            <div class="form-check">
                <InputCheckbox class="form-check-input" id="activated" @bind-Value="_request.Activated"
                    disabled="@(_request.UniqueName == AppState.CurrentOrganization)"/>
                <label class="form-check-label" for="activated">@Translator["Activated"]</label>     
            </div>
        </div>

        <div class="container mt-2 mt-md-3">
            <button type="submit" class="btn btn-primary">@Translator["Submit"]</button>
            @if(_chiefInspectorDefective?.Defective == true)
            {
                <button class="btn btn-outline-danger ml-3" @onclick="() => RepairAsync()">@Translator["Repair chief inspector"]</button>
            }
        </div>

    </EditForm>
}

@code {

    [Parameter]
    public string Organization { get; set; } = string.Empty;

    private OrganizationRequest? _request = null;

    private AssessChiefInspectorDefectivenessResponse? _chiefInspectorDefective;

    protected override async Task OnInitializedAsync()
    {
        var response = await OrganizationHandler.GetAsync(Organization);

        _request = new OrganizationRequest
        {
            ChiefInspector = response.ChiefInspector,
            DisplayName = response.DisplayName,
            UniqueName = response.UniqueName,
            Activated = response.Activated
        };

        _chiefInspectorDefective = await AccountHandler.AssessChiefInspectorDefectivenessAsync(
             new AssessChiefInspectorDefectivenessRequest
             {
                 Organization = Organization
             });
    }

    private async Task OnValidSubmitAsync()
    {
        await OrganizationHandler.ReplaceAsync(Organization, _request!);
        NavigationManager.NavigateTo("/organizations");
    }

    private async Task RepairAsync()
    {
        await AccountHandler.RepairChiefInspectorAsync(new RepairChiefInspectorRequest
        {
            Organization = Organization
        });
        NavigationManager.NavigateTo($"/inspectors-for-organization/{Organization}");
    }
}