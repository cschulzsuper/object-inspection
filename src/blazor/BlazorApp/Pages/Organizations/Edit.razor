@page "/organizations/{organization}/edit/"

@inject ITranslator<Edit> Translator
@inject NavigationManager NavigationManager
@inject IOrganizationRequestHandler OrganizationHandler

@attribute [Authorize("Maintenance")]

<PageTitle>@Translator[$"Edit organization"]</PageTitle>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">@Translator[$"Edit organization"]</h1>
</div>

@if (_request == null)
{
    <p><em>Loading...</em></p>
}
else 
{
    <EditForm Model="@_request" OnValidSubmit="@OnValidSubmitAsync">
        <DataAnnotationsValidator />

        <div class="container-fluid pb-3 mb-3 border-bottom">
            <div class="form-floating mt-3">
                <InputText class="form-control" id="organizationUniqueName" @bind-Value="_request.UniqueName" readonly />
                <label for="organizationUniqueName">@Translator[$"Unique name"]</label>
            </div>
            <div class="form-floating mt-3">
                <InputText class="form-control" id="organizationDisplayName" @bind-Value="_request.DisplayName" />
                <label for="organizationDisplayName">@Translator[$"Display name"]</label>
            </div>
            <div class="form-floating mt-3">
                <InputText class="form-control" id="organizationChiefInspector" @bind-Value="_request.ChiefInspector" />
                <label for="organizationChiefInspector">@Translator[$"Chief inspector"]</label>
            </div>
            <div class="form-check mt-3">
                <InputCheckbox class="form-check-input" id="organizationActivated" @bind-Value="_request.Activated"
                    disabled="@(_request.UniqueName == _organization)"/>
                <label class="form-check-label" for="organizationActivated">@Translator[$"Activated"]</label>
            </div>
        </div>

        @if (context.GetValidationMessages().Any())
        {
            <div class="container-fluid pb-4 mb-5">
                <div class="card card-body tex-wrap">
                    <ValidationSummary/>
                </div>
            </div>
        }
        else
        {
            <div class="container-fluid pb-4 mb-5">
                <button type="submit" class="btn btn-sm btn-primary">@Translator[$"Submit"]</button>
            </div>
        }
    </EditForm>
}

@code {

    [Parameter]
    public string Organization { get; set; } = string.Empty;

    private OrganizationRequest? _request = null;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    private string? _organization = null;

    protected override async Task OnParametersSetAsync()
    {
        _organization = (await AuthenticationState).User.GetOrganization();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var response = await OrganizationHandler.GetAsync(Organization);

            _request = new OrganizationRequest
            {
                ChiefInspector = response.ChiefInspector,
                DisplayName = response.DisplayName,
                UniqueName = response.UniqueName,
                Activated = response.Activated,
                ETag = response.ETag
            };

            StateHasChanged();
        }
    }

    private async Task OnValidSubmitAsync()
    {
        await OrganizationHandler.ReplaceAsync(Organization, _request!);
        NavigationManager.NavigateTo("/organizations");
    }
}