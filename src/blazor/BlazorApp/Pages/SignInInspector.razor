@page "/sign-in-inspector"

@inject ITranslator Translator
@inject IAccountHandler AccountHandler
@inject IInspectorHandler InspectorHandler
@inject NavigationManager NavigationManager

@attribute [Authorize]

<div class="container-fluid">
    <h1 id="signInInspectorHeadline">@Translator["Sign in inspector"]</h1>
</div>

<div class="container-fluid">
@if (_inspectors == null)
{
    <p><em>Loading...</em></p>
}
else if(!_inspectors.Any())
{
    <p><em>No inspectors found</em></p>
}
else
{
    @foreach (var inspector in _inspectors)
    {
        <button 
            id=@($"signIn{inspector.UniqueName}For{inspector.Organization}")
            class="btn btn-outline-secondary btn-block text-left font-italic"
            @onclick="() => SignInAsync(inspector)">
            @inspector.Organization @@ @inspector.UniqueName
        </button>
    }
}
</div>

@code {
    private ICollection<IdentityInspectorResponse>? _inspectors;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {          
        _inspectors = new List<IdentityInspectorResponse>();

        var user = (await AuthenticationState).User;

        var identity = user.GetIdentity();

        await foreach (var inspector in InspectorHandler.GetAllForIdentity(identity))
        {
            if (inspector.Activated)
            {
                _inspectors.Add(inspector);
            }
        }

        if(_inspectors.Count == 1)
        {
            await SignInAsync(_inspectors.Single());
        }

        StateHasChanged();
    }

    private async Task SignInAsync(IdentityInspectorResponse inspector)
    {
        await AccountHandler.SignInInspectorAsync(
            inspector.Organization,
            inspector.UniqueName);

        NavigationManager.NavigateTo("/");
    }
}