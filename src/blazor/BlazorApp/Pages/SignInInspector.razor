@page "/inspectors/sign-in"

@layout UnauthorizedLayout

@inject IAuthorizationRequestHandler AuthorizationRequestHandler
@inject IInspectorRequestHandler InspectorRequestHandler

@inject ITranslator<SignInInspector> Translator
@inject NavigationManager NavigationManager

@attribute [Authorize]

<PageTitle>@Translator["Sign in inspector"]</PageTitle>

<img class="mb-4" src="../img/logo.png" alt="" width="128" height="128">
<h1 class="h3 mb-3 fw-normal" id="signInHeadline">@Translator["Sign in inspector"]</h1>

@if (_inspectors == null)
{
    <p><em>Loading...</em></p>
}
else if(!_inspectors.Any())
{
    <p><em>No inspectors found</em></p>
}
else
{
    @foreach (var inspector in _inspectors)
    {
        <button
            id=@($"signIn{inspector.UniqueName}For{inspector.Organization}")
        class="btn btn-lg w-100 btn-outline-secondary btn-block text-start fst-italic fs-5 mb-3"
            @onclick="() => SignInAsync(inspector)">
            @inspector.Organization @@ @inspector.UniqueName
        </button>
    }
}

@code {
    private ICollection<IdentityInspectorResponse>? _inspectors;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        _inspectors = new List<IdentityInspectorResponse>();

        var user = (await AuthenticationState).User;

        var identity = user.GetIdentity();

        var inspectorsResponse = InspectorRequestHandler.GetAllForIdentity(identity);

        await foreach (var inspector in inspectorsResponse)
        {
            if (inspector.Activated)
            {
                _inspectors.Add(inspector);
            }
        }

        if (_inspectors.Count == 1)
        {
            await SignInAsync(_inspectors.Single());
            return;
        }

        StateHasChanged();
    }

    private async Task SignInAsync(IdentityInspectorResponse inspector)
    {
        await AuthorizationRequestHandler.AuthorizeAsync(
            inspector.Organization,
            inspector.UniqueName);

        NavigationManager.NavigateTo("/");
    }

}