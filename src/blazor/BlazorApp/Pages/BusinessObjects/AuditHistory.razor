@page "/business-objects/{businessObject}/audit-history"
@using Super.Paula.Client.Localization
@using Super.Paula.Application.Auditing
@using Super.Paula.Application.Auditing.Responses

@inject ITranslator Translator
@inject NavigationManager NavigationManager
@inject IBusinessObjectInspectionAuditHandler BusinessObjectInspectionAuditHandler

@attribute [Authorize("ChiefInspector")]

<div class="container mt-2 mt-md-3">
    <h1>@Translator["Inspection audits"]</h1>
</div>

<div class="container d-lg-flex mt-2 mt-md-3 align-items-center">
    <div class="custom-control custom-switch mr-4">
        <input type="checkbox" class="custom-control-input" checked="@_showSatisfying" id="showSatisfying" @onchange="ShowSatisfyingChanged">
        <label class="custom-control-label" for="showSatisfying">@Translator["Show satisfying"]</label>
    </div>
    <div class="custom-control custom-switch mr-4">
        <input type="checkbox" class="custom-control-input" checked="@_showInsufficient" id="showInsufficient" @onchange="ShowInsufficientChanged">
        <label class="custom-control-label" for="showInsufficient">@Translator["Show insufficient"]</label>
    </div>
    <div class="custom-control custom-switch mr-4">
        <input type="checkbox" class="custom-control-input" checked="@_showFailed" id="showFailed" @onchange="ShowFailedChanged">
        <label class="custom-control-label" for="showFailed">@Translator["Show failed"]</label>
    </div>
    <div class="input-group">
        <input type="text" class="form-control" placeholder="Search term" @bind="_searchTerm" @onkeyup="SearchTermKeyDownAsync">
        <div class="input-group-append">
            <button type="button" id="inspectorSearch" 
                class="btn @(_searchScope == "inspector" ? "btn-primary" : "btn-outline-secondary")"
                checked="@(_searchScope == "inspector")"
                @onclick="@(() => ChangeSearchScopeAsync("inspector"))">@Translator["Inspectors"]</button>
            <button type="button" id="inspectionSearch"
                class="btn @(_searchScope == "inspection" ? "btn-primary" : "btn-outline-secondary")"
                checked="@(_searchScope == "inspection")" 
                @onclick="@(() => ChangeSearchScopeAsync("inspection"))">@Translator["Inspections"]</button>
        </div>
    </div>
</div> 

<div class="container mt-2 mt-md-3">

@if (InspectionAudits == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>@Translator["Audit time"]</th>
                <th>@Translator["Inspection"]</th>
                <th>@Translator["Inspector"]</th>
                <th>@Translator["Result"]</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var inspectionAudit in InspectionAudits)
            {
                <tr>
                    <td class="col-2">@DateOnly.FromDayNumber(inspectionAudit.AuditDate).ToDateTime(TimeOnly.FromTimeSpan(TimeSpan.FromMilliseconds(inspectionAudit.AuditTime)),DateTimeKind.Utc).ToLocalTime().ToString()</td>
                    <td class="col-7">@inspectionAudit.InspectionDisplayName</td>
                    <td class="col-2">@inspectionAudit.Inspector</td>
                    <td class="col-1">
                    @switch(inspectionAudit.Result) 
                    {
                        case "satisfying":
                            <button class="btn btn-success btn-block" disabled>@Translator["Satisfying"]</button>
                             break;
                        case "insufficient": 
                            <button class="btn btn-warning btn-block" disabled>@Translator["Insufficient"]</button>
                            break;
                        case "failed": 
                            <button class="btn btn-danger btn-block" disabled>@Translator["Failed"]</button>
                            break;
                    } 
                    </td>                   
                </tr>
            }
        </tbody>
    </table>
}

</div>

@code {

    private ICollection<BusinessObjectInspectionAuditResponse>? _inspectionAudits;

    private IEnumerable<BusinessObjectInspectionAuditResponse>? InspectionAudits =>
        _inspectionAudits?
            .Where(x => 
                _showSatisfying && x.Result == "satisfying" ||
                _showInsufficient && x.Result == "insufficient" ||
                _showFailed && x.Result == "failed");

    [Parameter]
    public string BusinessObject { get; set; } = null!;

    private bool _showSatisfying = true;

    private bool _showInsufficient = true;

    private bool _showFailed = true;

    private string _searchTerm = string.Empty;

    private string _searchScope = string.Empty;

    protected override Task OnInitializedAsync()
    {
        return QueryAsync();
    }

    private async Task QueryAsync()
    {
        _inspectionAudits = new List<BusinessObjectInspectionAuditResponse>();

        if (_searchTerm.Length <= 3 && _searchScope != string.Empty)
        {
            return;
        }

        var searchTermInspectorSearch =
            (_searchTerm.Length > 3 && _searchScope == "inspector")  ? _searchTerm : null;
        var searchTermInspectionSearch =
            (_searchTerm.Length > 3 && _searchScope == "inspection")  ? _searchTerm : null;
 
        var response = BusinessObjectInspectionAuditHandler.SearchForBusinessObject(
            BusinessObject,
            searchTermInspectorSearch,
            searchTermInspectionSearch
        );

        await foreach(var inspectionAudit in response)
        {
            _inspectionAudits.Add(inspectionAudit);
            this.StateHasChanged();            
        }
    }

    private void ShowSatisfyingChanged(ChangeEventArgs e)
    {
        _showSatisfying = (bool)e.Value!;
    }

    private Task ChangeSearchScopeAsync(string searchScope)
    {
        _searchScope = _searchScope == searchScope
            ? string.Empty
            : searchScope;
        return QueryAsync();
    }

    private void ShowInsufficientChanged(ChangeEventArgs e)
    {
        _showInsufficient = (bool)e.Value!;
    }

    private void ShowFailedChanged(ChangeEventArgs e)
    {
        _showFailed = (bool)e.Value!;
    }

    public async Task SearchTermKeyDownAsync(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if (_searchTerm.Length > 3)
            {
                if (_searchScope == string.Empty)
                {
                    _searchScope = "inspector";
                }
            }
            else
            {
                _searchTerm = string.Empty;
                _searchScope = string.Empty;
            }
            await QueryAsync();
        }
    }    
}