@page "/business-objects/{businessObject}/audit-history"

@inject ITranslator Translator
@inject NavigationManager NavigationManager
@inject IBusinessObjectInspectionAuditHandler BusinessObjectInspectionAuditHandler

@attribute [Authorize("ManagementRead")]

<div class="container-fluid">
    <h1>@Translator["Inspection audits"]</h1>
</div>

<div class="container-fluid d-flex align-items-center mt-2 mb-2">
    <div class="input-group mr-4">
        <input type="text" class="form-control" placeholder="Search term" @bind="_searchQuery" @onkeyup="SearchTermKeyDownAsync">
    </div>
    <div class="custom-control custom-switch mr-4 d-none d-xl-block">
        <input type="checkbox" class="custom-control-input" checked="@_showSatisfying" id="showSatisfying" @onchange="ShowSatisfyingChangedAsync">
        <label class="custom-control-label" for="showSatisfying">@Translator["Show satisfying"]</label>
    </div>
    <div class="custom-control custom-switch mr-4 d-none d-xl-block">
        <input type="checkbox" class="custom-control-input" checked="@_showInsufficient" id="showInsufficient" @onchange="ShowInsufficientChangedAsync">
        <label class="custom-control-label" for="showInsufficient">@Translator["Show insufficient"]</label>
    </div>
    <div class="custom-control custom-switch mr-4 d-none d-xl-block">
        <input type="checkbox" class="custom-control-input" checked="@_showFailed" id="showFailed" @onchange="ShowFailedChangedAsync">
        <label class="custom-control-label" for="showFailed">@Translator["Show failed"]</label>
    </div>
</div>  

<div class="container-fluid">

<hr />
<CalenderWeekPager NextText="@Translator["Next"]" PreviousText="@Translator["Previous"]" CalenderWeek="@_calenderWeek" CalenderWeekChanged="@OnCalenderWeekChanged"/>

<table class="table table-sm">
    @if (_initialSearch != null && _initialSearch.TopResults.Count > 0)
    {
        <thead class="table-light table-borderless">
            <tr>
                <th class="col-2 d-none d-lg-table-cell">@Translator["Audit time"]</th>
                <th class="col-12 col-lg-8">@Translator["Inspection"]</th>
                <th class="col-2 d-none d-lg-table-cell">@Translator["Inspector"]</th>
                <th>@Translator["Result"]</th>
            </tr>
        </thead>
    }
    <tbody>
        <Virtualize @ref="Container" Context="inspectionAudit" ItemsProvider="@GetItemsProviderResultAsync">
            <tr>
                <td class="d-none d-lg-table-cell">@((inspectionAudit.AuditDate, inspectionAudit.AuditTime).ToLocalTimeString())</td>
                <td>
                    <button class="btn btn-outline-secondary btn-block text-left" @onclick="() => ToggleAnnotationVisibility(inspectionAudit)">
                        <div>@inspectionAudit.InspectionDisplayName</div>
                        <small class="d-lg-none">@((inspectionAudit.AuditDate, inspectionAudit.AuditTime).ToLocalTimeString()) - @inspectionAudit.Inspector</small>
                    </button>

                    @if (ShowAnnotation(inspectionAudit))
                    {
                        <div class="card card-body text-wrap">
                            @inspectionAudit.Annotation
                        </div>
                    }
                </td>
                <td class="d-none d-lg-table-cell">@inspectionAudit.Inspector</td>
                <td>
                @switch(inspectionAudit.Result) 
                {
                    case "satisfying":
                        <button class="btn btn-success btn-block" title="@Translator["Satisfying"]" 
                                disabled><span class="oi oi-star"/></button>
                            break;
                    case "insufficient": 
                        <button class="btn btn-warning btn-block" title="@Translator["Insufficient"]" 
                                disabled><span class="oi oi-warning"/></button>
                        break;
                    case "failed": 
                        <button class="btn btn-danger btn-block" title="@Translator["Failed"]" 
                                disabled><span class="oi oi-x"/></button>
                        break;
                } 
                </td>                   
            </tr>
        </Virtualize>
    </tbody>
</table>
        
@if (_initialSearch != null && _initialSearch.TopResults.Count > 0)
{
    <CalenderWeekPager NextText="@Translator["Next"]" PreviousText="@Translator["Previous"]" CalenderWeek="@_calenderWeek" CalenderWeekChanged="@OnCalenderWeekChanged"/>
}

</div>

@code {

    private SearchBusinessObjectInspectionAuditResponse? _initialSearch;

    private IList<string> _inspectionAuditAnnotationVisibile = new List<string>();

    private bool _showSatisfying = true;

    private bool _showInsufficient = true;

    private bool _showFailed = true;

    private string _searchQuery = string.Empty;

    private (int Year, int Week) _calenderWeek = (default, default);

    private Virtualize<BusinessObjectInspectionAuditResponse>? Container { get; set; }

    [Parameter]
    public string BusinessObject { get; set; } = null!;

    protected override void OnInitialized()
    {
        var today = DateTime.Today;
        _calenderWeek = (ISOWeek.GetYear(today), ISOWeek.GetWeekOfYear(today));
    }

    protected override async Task OnParametersSetAsync()
    {
        await ResetAsync();
    }

    private async Task OnCalenderWeekChanged((int Year, int Week) calenderWeek)
    {
        _calenderWeek = calenderWeek;
        await ResetAsync();
    }

    private string SearchQuery()
    {
        var searchQuery = _searchQuery;

        if (_showSatisfying)
        {
            searchQuery += "+result:satisfying";
        }

        if (_showInsufficient)
        {
            searchQuery += "+result:insufficient";
        }

        if (_showFailed)
        {
            searchQuery += "+result:failed";
        }

        var calenderWeekFrom = ISOWeek
            .ToDateTime(_calenderWeek.Year, _calenderWeek.Week, DayOfWeek.Monday)
            .ToUniversalTime()
            .ToNumbers();

        var calenderWeekTo = ISOWeek
            .ToDateTime(_calenderWeek.Year, _calenderWeek.Week, DayOfWeek.Monday).AddDays(7).AddMilliseconds(-1)
            .ToUniversalTime()
            .ToNumbers();

        searchQuery += $"+from-date:{calenderWeekFrom.day}+from-time:{calenderWeekFrom.milliseconds}+to-date:{calenderWeekTo.day}+to-time:{calenderWeekTo.milliseconds}";

        searchQuery += $"+business-object:{BusinessObject}";

        return searchQuery
            .Trim()
            .Trim('+');
    }

    private async Task ResetAsync()
    {
        _initialSearch = null;
        _inspectionAuditAnnotationVisibile.Clear();

        if (Container != null)
        {
            await Container.RefreshDataAsync();
        }

        this.StateHasChanged();            
    }

    private async Task<IEnumerable<BusinessObjectInspectionAuditResponse>> QueryAsync(string searchQuery, int skip, int take, 
        CancellationToken cancellationToken = default)
    {
        var response = BusinessObjectInspectionAuditHandler.GetAll(searchQuery, skip, take, cancellationToken);

        var result = new List<BusinessObjectInspectionAuditResponse>();

        await foreach (var item in response)
        {
            result.Add(item);
        }

        return result;
    }

    private async ValueTask<ItemsProviderResult<BusinessObjectInspectionAuditResponse>> GetItemsProviderResultAsync(ItemsProviderRequest request)
    {
        if (request.StartIndex == 0 || _initialSearch == null)
        {
            _initialSearch = await BusinessObjectInspectionAuditHandler.SearchAsync(SearchQuery());
            this.StateHasChanged(); 
        }

        var totalCount = _initialSearch.TotalCount;

        var inspectionAudit = new List<BusinessObjectInspectionAuditResponse>();

        if (request.StartIndex == 0)
        {
            inspectionAudit.AddRange(
                _initialSearch.TopResults
                    .Skip(request.StartIndex)
                    .Take(request.Count)
                    .ToList());
        } 

        if(inspectionAudit.Count < request.Count)
        {
            inspectionAudit.AddRange(
                await QueryAsync(SearchQuery(), 
                    request.StartIndex + inspectionAudit.Count, 
                    request.Count - inspectionAudit.Count, 
                    request.CancellationToken));
        }

        return new ItemsProviderResult<BusinessObjectInspectionAuditResponse>(inspectionAudit, totalCount);
    }

    private async Task ShowSatisfyingChangedAsync(ChangeEventArgs e)
    {
        _showSatisfying = (bool)e.Value!;
        await ResetAsync();
    }

    private async Task ShowInsufficientChangedAsync(ChangeEventArgs e)
    {
        _showInsufficient = (bool)e.Value!;
        await ResetAsync();
    }

    private async Task ShowFailedChangedAsync(ChangeEventArgs e)
    {
        _showFailed = (bool)e.Value!;
        await ResetAsync();
    }

    public async Task SearchTermKeyDownAsync(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await ResetAsync();
        }
    }

    private bool ShowAnnotation(BusinessObjectInspectionAuditResponse audit)
    {
        string key = $"{audit.BusinessObject}/{audit.Inspection}/{audit.AuditDate}/{audit.AuditTime}";
        return _inspectionAuditAnnotationVisibile.Contains(key) && !string.IsNullOrWhiteSpace(audit.Annotation);
    }

    private void ToggleAnnotationVisibility(BusinessObjectInspectionAuditResponse audit)
    {
        string key = $"{audit.BusinessObject}/{audit.Inspection}/{audit.AuditDate}/{audit.AuditTime}";

        if (_inspectionAuditAnnotationVisibile.Contains(key))
        {
            _inspectionAuditAnnotationVisibile.Remove(key);
        } 
        else
        {
            _inspectionAuditAnnotationVisibile.Add(key);
        }
    }
}