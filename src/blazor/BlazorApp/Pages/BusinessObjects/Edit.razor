@page "/business-objects/{businessObject}/edit"

@inject ITranslator<Edit> Translator
@inject NavigationManager NavigationManager
@inject IBusinessObjectRequestHandler BusinessObjectHandler
@inject IExtensionRequestHandler ExtensionRequestHandler

@attribute [Authorize("ManagementRead")]

<PageTitle>@Translator[$"Edit business object"]</PageTitle>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">@Translator[$"Edit business object"]</h1>
</div>

@if (_request == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@_request" OnValidSubmit="@OnValidSubmitAsync">
        <DataAnnotationsValidator/>

        <div class="container-fluid pb-3 mb-3 border-bottom">
            <div class="form-floating mt-3">
                <InputText class="form-control" id="businessObjectUniqueName" @bind-Value="_request.UniqueName" readonly/>
                <label for="businessObjectUniqueName">@Translator[$"Unique name"]</label>
            </div>
            <div class="form-floating mt-3">
                <InputText class="form-control" id="businessObjectDisplayName" @bind-Value="_request.DisplayName"/>
                <label for="businessObjectDisplayName">@Translator[$"Display name"]</label>
            </div>
            <div class="form-floating mt-3">
                <InputText class="form-control" id="businessObjectInspector" @bind-Value="_request.Inspector"/>
                <label for="businessObjectInspector">@Translator[$"Inspector"]</label>
            </div>
        </div>

        @if (_extension != null)
        {
            <div class="container-fluid pb-3 mb-3 border-bottom">
                @foreach (var extensionField in _extension.Fields)
                {
                    <div class="form-floating mt-3">
                        <input class="form-control"
                               id="@GetExtensionFieldInputId(extensionField)"
                               value="@_request[extensionField.DataName]"
                               @onchange="@(e => _request[extensionField.DataName] = e.Value)"/>
                        <label for="@GetExtensionFieldInputId(extensionField)">@Translator[extensionField.DisplayName]</label>
                    </div>
                }
            </div>
        }

        @if (context.GetValidationMessages().Any())
        {
            <div class="container-fluid pb-4 mb-5">
                <div class="card card-body tex-wrap">
                    <ValidationSummary/>
                </div>
            </div>
        }
        else
        {
            <div class="container-fluid pb-4 mb-5">
                <AuthorizedButton Policy="ManagementFull" type="submit" class="btn btn-sm btn-primary">@Translator[$"Submit"]</AuthorizedButton>
            </div>
        }

    </EditForm>
}

@code {

    [Parameter]
    public string BusinessObject { get; set; } = string.Empty;

    private ExtensionResponse? _extension;

    private BusinessObjectRequest? _request = null;

    protected override async Task OnInitializedAsync()
    {
        _extension = await ExtensionRequestHandler.GetAsync(ExtensionAggregateTypes.BusinessObject);

        var response = await BusinessObjectHandler.GetAsync(BusinessObject);

        _request = new BusinessObjectRequest
        {
            Inspector = response.Inspector,
            DisplayName = response.DisplayName,
            UniqueName = response.UniqueName,
            ETag = response.ETag,
        };

        foreach (var extension in response)
        {
            _request[extension.Key] = response[extension.Key];
        }
    }

    private async Task OnValidSubmitAsync()
    {
        await BusinessObjectHandler.ReplaceAsync(BusinessObject, _request!);
        NavigationManager.NavigateTo("/business-objects");
    }

    private string GetExtensionFieldInputId(ExtensionFieldResponse extensionField)
        => $"businessObject{char.ToUpperInvariant(extensionField.DataName[0])}{extensionField.DataName[1..]}";

}