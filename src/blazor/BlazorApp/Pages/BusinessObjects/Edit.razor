@page "/business-objects/{businessObject}/edit"

@inject ITranslator<Edit> Translator
@inject NavigationManager NavigationManager
@inject IBusinessObjectHandler BusinessObjectHandler
@inject IExtensionHandler ExtensionHandler

@attribute [Authorize("ManagementRead")]

<div class="container-fluid">
    <h1>@Translator[$"Edit business object"]</h1>
</div>

@if (_request == null || _extension == null)
{
    <p><em>Loading...</em></p>
}
else 
{
    <EditForm Model="@_request" OnValidSubmit="@OnValidSubmitAsync">
        <DataAnnotationsValidator />

        <div class="container-fluid">
            <div class="form-group">
                <label>@Translator[$"Unique name"]</label>
                <InputText class="form-control" id="businessObjectUniqueName" @bind-Value="_request.UniqueName" readonly/>
            </div>
            <div class="form-group">
                <label>@Translator[$"Display name"]</label>
                <InputText class="form-control" id="businessObjectDisplayName" @bind-Value="_request.DisplayName"  />
            </div>
            <div class="form-group">
                <label>@Translator[$"Inspector"]</label>
                <InputText class="form-control" id="businessObjectInspector" @bind-Value="_request.Inspector" />
            </div>
        </div>

        <div class="container-fluid">
            @foreach(var extensionField in _extension.Fields)
            {
                <div class="form-group">
                    <label>@Translator[extensionField.DisplayName]</label>
                    <input 
                        class="form-control" 
                        id="@GetExtensionFieldInputId(extensionField)"
                        value="@_request[extensionField.DataName]"
                        @onchange="@(e => _request[extensionField.DataName] = e.Value)" />
                </div>
            }
        </div>

        @if(context.GetValidationMessages().Any())
        {
            <div class="container-fluid">
                <div class="card card-body tex-wrap">
                    <ValidationSummary />    
                </div>
            </div>
        } 
        else 
        {
            <div class="container-fluid">
                <AuthorizedButton Policy="ManagementFull" type="submit" class="btn btn-primary">@Translator[$"Submit"]</AuthorizedButton>
            </div>
        }

    </EditForm>
}

@code {

    [Parameter]
    public string BusinessObject { get; set; } = string.Empty;

    private ExtensionResponse? _extension;

    private BusinessObjectRequest? _request = null;

    protected override async Task OnInitializedAsync()
    {
        _extension = await ExtensionHandler.GetAsync(ExtensionAggregateTypes.BusinessObject);

        var response = await BusinessObjectHandler.GetAsync(BusinessObject);

        _request = new BusinessObjectRequest
        {
            Inspector = response.Inspector,
            DisplayName = response.DisplayName,
            UniqueName = response.UniqueName,
            ETag = response.ETag,
        };

        foreach(var extension in response)
        {
            _request[extension.Key] = response[extension.Key];
        }
    }

    private async Task OnValidSubmitAsync()
    {
        await BusinessObjectHandler.ReplaceAsync(BusinessObject, _request!);
        NavigationManager.NavigateTo("/business-objects");
    }

    private string GetExtensionFieldInputId(ExtensionFieldResponse extensionField)
        => $"businessObject{char.ToUpperInvariant(extensionField.DataName[0])}{extensionField.DataName[1..]}";
}