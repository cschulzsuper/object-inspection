@page "/business-objects/{businessObject}/edit"

@inject ITranslator Translator
@inject NavigationManager NavigationManager
@inject IBusinessObjectHandler BusinessObjectHandler

@attribute [Authorize("RequiresWeekManageability")]

<div class="container-fluid">
    <h1>@Translator["Edit business object"]</h1>
</div>

@if (_request == null)
{
    <p><em>Loading...</em></p>
}
else 
{
    <EditForm Model="@_request" OnValidSubmit="@OnValidSubmitAsync">
        <DataAnnotationsValidator />

        <div class="container-fluid">
            <div class="form-group">
                <label>@Translator["Unique name"]</label>
                <InputText class="form-control" id="uniqueName" @bind-Value="_request.UniqueName" readonly/>
            </div>
            <div class="form-group">
                <label>@Translator["Display name"]</label>
                <InputText class="form-control" id="displayName" @bind-Value="_request.DisplayName"  />
            </div>
            <div class="form-group">
                <label>@Translator["Inspector"]</label>
                <InputText class="form-control" id="inspector" @bind-Value="_request.Inspector" />
            </div>
        </div>

        @if(context.GetValidationMessages().Any())
        {
            <div class="container-fluid">
                <div class="card card-body tex-wrap">
                    <ValidationSummary />    
                </div>
            </div>
        } 
        else 
        {
            <div class="container-fluid">
                <AuthorizedButton Policy="RequiresManageability" type="submit" class="btn btn-primary">@Translator["Submit"]</AuthorizedButton>
            </div>
        }

    </EditForm>
}

@code {

    [Parameter]
    public string BusinessObject { get; set; } = string.Empty;

    private BusinessObjectRequest? _request = null;

    protected override async Task OnInitializedAsync()
    {
        var response = await BusinessObjectHandler.GetAsync(BusinessObject);

        _request = new BusinessObjectRequest
        {
            Inspector = response.Inspector,
            DisplayName = response.DisplayName,
            UniqueName = response.UniqueName
        };
    }

    private async Task OnValidSubmitAsync()
    {
        await BusinessObjectHandler.ReplaceAsync(BusinessObject, _request!);
        NavigationManager.NavigateTo("/business-objects");
    }
}