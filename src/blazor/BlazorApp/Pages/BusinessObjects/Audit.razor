@page "/business-objects/{businessObject}/audit"

@inject ITranslator Translator
@inject NavigationManager NavigationManager
@inject IInspectionHandler InspectionHandler
@inject IBusinessObjectHandler BusinessObjectHandler

@attribute [Authorize("Inspector")]

<div class="container-fluid">
    <h1>@Translator["Inspections"]</h1>
</div>

<div class="container-fluid">

@if (_businessObject == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-sm">
        <thead>
            <tr>
                <th class="col-11">@Translator["Inspection"]</th>
                <th class="col-1">@Translator["Result"]</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var inspection in _businessObject.Inspections.Where(x => x.Activated && x.ActivatedGlobally))
            {
                <tr>
                    <td class="col-11">
                        <BusinessObjectInspectionResponseToggle Inspection="inspection"/>
                    </td>
                    <td class="col-1">
                        <div class="d-sm-inline-flex">
                            @switch (inspection.AuditResult)
                            {
                                case "satisfying":
                                    <button class="btn btn-success mr-sm-2 mb-2 mb-sm-0 w-auto"
                                            @onclick="() => ToggleAsync(inspection)" title="@Translator["Satisfying"]">
                                        <span class="oi oi-star"/>
                                    </button>
                                    break;
                                case "insufficient":
                                    <button class="btn btn-warning mr-sm-2 mb-2 mb-sm-0 w-auto"
                                            @onclick="() => ToggleAsync(inspection)" title="@Translator["Insufficient"]">
                                        <span class="oi oi-warning"/>
                                    </button>
                                    break;
                                case "failed":
                                    <button class="btn btn-danger mr-sm-2 mb-2 mb-sm-0 w-auto"
                                            @onclick="() => ToggleAsync(inspection)" title="@Translator["Failed"]">
                                        <span class="oi oi-x"/>
                                    </button>
                                    break;
                                default:
                                    <button class="btn btn-secondary mr-sm-2 mb-2 mb-sm-0 w-auto"
                                            @onclick="() => ToggleAsync(inspection)" title="@Translator["Unset"]">
                                        <span class="oi oi-ellipses"></span>
                                    </button>
                                    break;
                            }
                            <button class="btn btn-outline-primary btn-block w-auto"
                                    @onclick="() => NavigateToAnnotationAsync(inspection)">
                                <span class="oi oi-copywriting"/>
                            </button>
                        </div>
                    </td>                   
                </tr>
            }
        </tbody>
    </table>
}

</div>

@code {

    private BusinessObjectResponse? _businessObject;

    [Parameter]
    public string BusinessObject { get; set; } = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await QueryAsync();
            StateHasChanged();
        }
    }

    public async Task QueryAsync()
    {
        _businessObject = await BusinessObjectHandler.GetAsync(BusinessObject);
    }

    private async Task ToggleAsync(BusinessObjectInspectionResponse inspection)
    {
        var utcNow = DateTime.UtcNow;

        var audit = (inspection.AuditDate, inspection.AuditTime)
            .ToDateTime();

        var inspectionToOld = audit < utcNow.AddMinutes(-1);

        var nextResult = new Dictionary<string,string>
        {
            [""] = "satisfying",
            ["satisfying"] = "insufficient",
            ["insufficient"] = "failed",
            ["failed"] = "satisfying"
        };

        if (!inspectionToOld)
        {
            var request = new ChangeInspectionAuditRequest
            {
                Result = nextResult[inspection.AuditResult]
            };

            await BusinessObjectHandler.ChangeInspectionAuditAsync(
                _businessObject!.UniqueName, inspection.UniqueName, request);

            inspection.AuditResult = request.Result;
        }
        else
        {
            var request = new CreateInspectionAuditRequest
            {
                Inspection = inspection.UniqueName,
                AuditDate = DateOnly.FromDateTime(utcNow).DayNumber,
                AuditTime = (int)utcNow.TimeOfDay.TotalMilliseconds,
                Result = nextResult[inspection.AuditResult]
            };

             await BusinessObjectHandler.CreateInspectionAuditAsync(
                _businessObject!.UniqueName, request);

            inspection.AuditDate = request.AuditDate;
            inspection.AuditTime = request.AuditTime;
            inspection.PlannedAuditDate = default;
            inspection.PlannedAuditTime = default;
            inspection.AuditResult = request.Result;
        }

        var response = await BusinessObjectHandler.GetAsync(BusinessObject);

        var inspectionResponse = response.Inspections
            .SingleOrDefault(x => x.UniqueName == inspection.UniqueName);

        if (inspectionResponse != null)
        {
            inspection.PlannedAuditDate = inspectionResponse.PlannedAuditDate;
            inspection.PlannedAuditTime = inspectionResponse.PlannedAuditTime;
        }
    }

    private void NavigateToAnnotationAsync(BusinessObjectInspectionResponse inspection)
        => NavigationManager.NavigateTo($"/business-objects/{_businessObject!.UniqueName}/audit/{inspection.UniqueName}/{inspection.AuditDate}/{inspection.AuditTime}/annotation");
}