@page "/business-objects/{businessObject}/audit"

@inject ITranslator Translator
@inject NavigationManager NavigationManager
@inject IInspectionHandler InspectionHandler
@inject IBusinessObjectHandler BusinessObjectHandler

@attribute [Authorize("RequiresWeekInspectability")]

<div class="container-fluid">
    <h1>@Translator["Inspections"]</h1>
</div>

<div class="container-fluid">

@if (_businessObject == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-sm">
        <thead class="table-light table-borderless">
            <tr>
                <th class="col-12">@Translator["Inspection"]</th>
                <th colspan="2">@Translator["Result"]</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var inspection in _businessObject.Inspections.Where(x => x.Activated && x.ActivatedGlobally))
            {
                <tr>
                    <td>
                        <BusinessObjectInspectionResponseToggle Inspection="inspection"/>
                    </td>
                    <td>
                        @switch (inspection.AuditResult)
                        {
                            case "satisfying":
                                <AuthorizedButton Policy="RequiresInspectability" class="btn btn-success btn-block" title="@Translator["Satisfying"]"
                                        @onclick="() => ToggleAsync(inspection)"><span class="oi oi-star"/></AuthorizedButton>
                                break;
                            case "insufficient":
                                <AuthorizedButton Policy="RequiresInspectability" class="btn btn-warning btn-block" title="@Translator["Insufficient"]"
                                        @onclick="() => ToggleAsync(inspection)"><span class="oi oi-warning"/></AuthorizedButton>
                                break;
                            case "failed":
                                <AuthorizedButton Policy="RequiresInspectability" class="btn btn-danger btn-block" title="@Translator["Failed"]"
                                        @onclick="() => ToggleAsync(inspection)"><span class="oi oi-x"/></AuthorizedButton>
                                break;
                            default:
                                <AuthorizedButton Policy="RequiresInspectability" class="btn btn-secondary btn-block" title="@Translator["Unset"]"
                                        @onclick="() => ToggleAsync(inspection)"><span class="oi oi-ellipses"></span></AuthorizedButton>
                                break;
                        }
                    </td> 
                    <td>
                        <button class="btn btn-outline-primary btn-block" title="@Translator["Annotate"]"
                                @onclick="() => NavigateToAnnotationAsync(inspection)"><span class="oi oi-copywriting"/></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

</div>

@code {

    private BusinessObjectResponse? _businessObject;

    [Parameter]
    public string BusinessObject { get; set; } = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await QueryAsync();
            StateHasChanged();
        }
    }

    public async Task QueryAsync()
    {
        _businessObject = await BusinessObjectHandler.GetAsync(BusinessObject);
    }

    private async Task ToggleAsync(BusinessObjectInspectionResponse inspection)
    {
        var utcNow = DateTime.UtcNow;

        var audit = (inspection.AuditDate, inspection.AuditTime)
            .ToDateTime();

        var inspectionToOld = audit < utcNow.AddMinutes(-1);

        var nextResult = new Dictionary<string,string>
        {
            [""] = "satisfying",
            ["satisfying"] = "insufficient",
            ["insufficient"] = "failed",
            ["failed"] = "satisfying"
        };

        if (!inspectionToOld)
        {
            var request = new ChangeInspectionAuditRequest
            {
                Result = nextResult[inspection.AuditResult]
            };

            await BusinessObjectHandler.ChangeInspectionAuditAsync(
                _businessObject!.UniqueName, inspection.UniqueName, request);

            inspection.AuditResult = request.Result;
        }
        else
        {
            var request = new CreateInspectionAuditRequest
            {
                Inspection = inspection.UniqueName,
                AuditDate = DateOnly.FromDateTime(utcNow).DayNumber,
                AuditTime = (int)utcNow.TimeOfDay.TotalMilliseconds,
                Result = nextResult[inspection.AuditResult]
            };

            var response = await BusinessObjectHandler.CreateInspectionAuditAsync(
                _businessObject!.UniqueName, request);

            inspection.AuditDate = request.AuditDate;
            inspection.AuditTime = request.AuditTime;
            inspection.AuditResult = request.Result;

            inspection.AuditSchedule.Appointments = response.Appointments;
        }
    }

    private void NavigateToAnnotationAsync(BusinessObjectInspectionResponse inspection)
        => NavigationManager.NavigateTo($"/business-objects/{_businessObject!.UniqueName}/audit/{inspection.UniqueName}/{inspection.AuditDate}/{inspection.AuditTime}/annotation");
}