@page "/business-objects/{businessObject}/inspections"

@inject ITranslator Translator
@inject NavigationManager NavigationManager
@inject IInspectionHandler InspectionHandler
@inject IBusinessObjectHandler BusinessObjectHandler
@inject IAccountHandler AccountHandler

@attribute [Authorize("Inspector")]

<div class="container mt-2 mt-md-3">
    <h1>@Translator["Inspections"]</h1>
</div>

<AuthorizeView Policy="ChiefInspector">
    <Authorized>
        <div class="container mt-2 mt-md-3">
            <div class="custom-control custom-switch mr-4">
                <input type="checkbox" class="custom-control-input" checked="@_onlyAssigned" id="onlyAssigned" @onchange="OnlyAssignedChangedAsync">
                <label class="custom-control-label" for="onlyAssigned">@Translator["Only assigned"]</label>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

<div class="container mt-2 mt-md-3 
            ml-n4      mr-n4      w-auto 
            ml-sm-auto mr-sm-auto w-sm-100">

@if (RelevantInspections == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th class="col-2 d-none d-lg-table-cell">@Translator["Unique name"]</th>
                <th class="col-8">@Translator["Display name"]</th>
                <AuthorizeView Policy="ChiefInspector">
                    <Authorized>
                        <th class="col-1"></th>
                    </Authorized>
                </AuthorizeView>
            </tr>
        </thead>
        <tbody>
            @foreach (var inspection in RelevantInspections)
            {
                <tr>
                    <td class="col-2 d-none d-lg-table-cell">@inspection.UniqueName</td>
                    <td class="col-8">
                        <BusinessObjectInspectionResponseToggle Inspection="inspection"/>
                    </td>
                    <AuthorizeView Policy="ChiefInspector">
                        <Authorized>
                            @if(_inspectionBusinessObjects!.ContainsKey(inspection.UniqueName)) {
                                <td class="col-1">
                                    <div class="d-sm-inline-flex">
                                        <button class="btn btn-primary mr-sm-2 mb-2 mb-sm-0 w-auto"
                                                @onclick="() => UnassignAsync(inspection)"><span class="oi oi-minus"/></button>
                                        <button class="btn btn-outline-primary btn-block w-auto"
                                                @onclick="() => Schedule(inspection)"><span class="oi oi-clock"/></button>
                                    </div>
                                </td>
                            } else {
                                <td class="col-1">
                                    <button class="btn btn-outline-primary w-auto" 
                                            @onclick="() => AssignAsync(inspection)"><span class="oi oi-plus"/></button>
                                </td>
                            }
                        </Authorized>
                    </AuthorizeView>
                </tr>
            }
        </tbody>
    </table>
}

</div>

@code {

    [Parameter]
    public string BusinessObject { get; set; } = null!;

    private IDictionary<string, BusinessObjectInspectionResponse>? _inspectionBusinessObjects;

    private IDictionary<string, BusinessObjectInspectionResponse>? _inspections;

    private bool _onlyAssigned = true;

    public IEnumerable<BusinessObjectInspectionResponse>? RelevantInspections
        => _onlyAssigned
            ? _inspectionBusinessObjects?
                .OrderBy(x => x.Key)
                .Select(x => x.Value)

            : _inspectionBusinessObjects?
                .Concat(_inspections!
                    .Where(x => !_inspectionBusinessObjects.ContainsKey(x.Key)))
                .OrderBy(x => x.Key)
                .Select(x => x.Value);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await QueryAsync();
            StateHasChanged();
        }
    }

    public async Task QueryAsync()
    {
        var authorizations = (await AccountHandler.QueryAuthorizationsAsync()).Values;

        _inspections = new Dictionary<string, BusinessObjectInspectionResponse>();

        if (authorizations.Contains("ChiefInspector"))
        {
            var inspectionResponse = InspectionHandler.GetAll();

            await foreach (var inspection in inspectionResponse)
            {
                _inspections!.Add(inspection.UniqueName, new BusinessObjectInspectionResponse
                {
                    Activated = false,
                    DisplayName = inspection.DisplayName,
                    Text = inspection.Text,
                    UniqueName = inspection.UniqueName
                });
                this.StateHasChanged();
            }
        }


        var response = await BusinessObjectHandler.GetAsync(BusinessObject);

        _inspectionBusinessObjects = new Dictionary<string, BusinessObjectInspectionResponse>();

        foreach (var inspection in response.Inspections)
        {
            _inspectionBusinessObjects!.Add(inspection.UniqueName, inspection);

            this.StateHasChanged();
        }
    }

    public Task OnlyAssignedChangedAsync(ChangeEventArgs e)
    {
        _onlyAssigned = (bool)e.Value!;
        return Task.CompletedTask;
    }

    public async Task AssignAsync(BusinessObjectInspectionResponse inspection)
    {
        await BusinessObjectHandler.AssignInspectionAsync(
            BusinessObject!,
            new AssignInspectionRequest
            {
                Activated = true,
                UniqueName = inspection.UniqueName
            });

        _inspectionBusinessObjects!.Add(inspection.UniqueName, _inspections![inspection.UniqueName]);
    }

    public async Task UnassignAsync(BusinessObjectInspectionResponse inspection)
    {
        await BusinessObjectHandler.CancelInspectionAsync(
            BusinessObject!,
            new CancelInspectionRequest
            {
                UniqueName = inspection.UniqueName
            });

        _inspectionBusinessObjects!.Remove(inspection.UniqueName);
    }

    public void Schedule(BusinessObjectInspectionResponse inspection)
        => NavigationManager.NavigateTo($"/business-objects/{BusinessObject}/inspections/{inspection.UniqueName}/schedule");
}