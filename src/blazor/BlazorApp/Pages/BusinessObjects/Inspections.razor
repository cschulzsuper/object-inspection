@page "/business-objects/{businessObject}/inspections"

@inject ITranslator Translator
@inject NavigationManager NavigationManager
@inject IInspectionHandler InspectionHandler
@inject IBusinessObjectHandler BusinessObjectHandler
@inject IBusinessObjectInspectionHandler BusinessObjectInspectionHandler

@attribute [Authorize("AuditingRead")]

<div class="container-fluid">
    <h1>@Translator["Inspections"]</h1>
</div>

<AuthorizeView Policy="ManagementRead">
    <Authorized>
        <div class="container-fluid m-2">
            <button id="assignmentMode" class="btn @(_mode == Mode.AssignmentMode ? "btn-primary" : "btn-outline-secondary")"
                    title="@Translator["Assigment mode"]"
                    @onclick="ToggleAssignmentMode"><span class="oi oi-list"/></button>

            <button id="dropMode" class="d-lg-none btn @(_mode == Mode.DropMode ? "btn-primary" : "btn-outline-secondary")"
                    title="@Translator["Drop mode"]"
                    @onclick="ToggleDropMode"><span class="oi oi-media-skip-forward"/></button>

            <button id="scheduleMode" class=" d-lg-none btn @(_mode == Mode.ScheduleMode ? "btn-primary" : "btn-outline-secondary")" 
                    title="@Translator["Schedule mode"]"
                    @onclick="ToggleScheduleMode"><span class="oi oi-clock"/></button>
        </div>
    </Authorized>
</AuthorizeView>

<div class="container-fluid">

@if (RelevantInspections == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-sm">
        <thead class="table-light table-borderless">
            <tr>
                <th class="col-2 d-none d-lg-table-cell">@Translator["Unique name"]</th>
                <th class="col-12 col-lg-10">@Translator["Display name"]</th>

                <AuthorizeView Policy="ManagementRead">
                    <Authorized>
                        <th class=@(_mode == Mode.AssignmentMode ? "" : "d-none d-lg-table-cell")></th>
                        <th class=@(_mode == Mode.ScheduleMode ? "" : "d-none d-lg-table-cell")></th>
                        <th class=@(_mode == Mode.DropMode ? "" : "d-none d-lg-table-cell")></th>
                    </Authorized>
                </AuthorizeView>

            </tr>
        </thead>
        <tbody>
            @foreach (var inspection in RelevantInspections)
            {
                <tr>
                    <td class="d-none d-lg-table-cell">@inspection.Inspection</td>
                    <td>
                        <BusinessObjectInspectionResponseToggle Inspection="inspection"/>
                    </td>

                    <AuthorizeView Policy="ManagementRead">
                        <Authorized>
                            <td class=@(_mode == Mode.AssignmentMode ? "" : "d-none d-lg-table-cell")>
                                @if (_inspectionBusinessObjects!.ContainsKey(inspection.Inspection))
                                {
                                    <AuthorizedButton Policy="ManagementFull" 
                                            id="@($"unassign{inspection.Inspection}")"
                                            class="btn btn-primary btn-block"
                                            title="@Translator["Unassign"]"
                                            @onclick="() => UnassignAsync(inspection)"><span class="oi oi-minus"/></AuthorizedButton>
                                }
                                else
                                {
                                    <AuthorizedButton Policy="ManagementFull" 
                                            id="@($"assign{inspection.Inspection}")"
                                            class="btn btn-primary btn-block"
                                            title="@Translator["Assign"]"
                                            @onclick="() => AssignAsync(inspection)"><span class="oi oi-plus"/></AuthorizedButton>
                                }
                            </td>
                            <td class=@(_mode == Mode.ScheduleMode ? "" : "d-none d-lg-table-cell")>
                                <button 
                                        id="@($"schedule{inspection.Inspection}")"
                                        class="btn btn-primary btn-block"
                                        title="@Translator["Schedule"]"
                                        @onclick="() => Schedule(inspection)"><span class="oi oi-clock"/></button>
                            </td>
                            <td class=@(_mode == Mode.DropMode ? "" : "d-none d-lg-table-cell")>
                                <AuthorizedButton Policy="ManagementFull" 
                                        id="@($"drop{inspection.Inspection}")"
                                        class="btn btn-primary btn-block"
                                        title="@Translator["Drop"]"
                                        @onclick="() => DropAsync(inspection)"><span class="oi oi-media-skip-forward"></span></AuthorizedButton>
                            </td>
                        </Authorized>
                    </AuthorizeView>

                </tr>
            }
        </tbody>
    </table>
}

</div>

@code {

    public enum Mode
    {
        None,
        AssignmentMode,
        ScheduleMode,
        DropMode
    }

    [Parameter]
    public string BusinessObject { get; set; } = null!;

    private IDictionary<string, BusinessObjectInspectionResponse>? _inspectionBusinessObjects;

    private IDictionary<string, BusinessObjectInspectionResponse>? _inspections;

    private BusinessObjectResponse? _businessObject;

    private Mode _mode = Mode.ScheduleMode;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    public IEnumerable<BusinessObjectInspectionResponse>? RelevantInspections
        => _mode != Mode.AssignmentMode
            ? _inspectionBusinessObjects?
                .OrderBy(x => x.Key)
                .Select(x => x.Value)

            : _inspectionBusinessObjects?
                .Concat(_inspections!
                    .Where(x => !_inspectionBusinessObjects.ContainsKey(x.Key)))
                .OrderBy(x => x.Key)
                .Select(x => x.Value);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await QueryAsync();
            StateHasChanged();
        }
    }

    public async Task QueryAsync()
    {
        _inspections = new Dictionary<string, BusinessObjectInspectionResponse>();

        _businessObject = await BusinessObjectHandler.GetAsync(BusinessObject);

        var isChief = (await AuthenticationState).User.HasAuthorization("Chief");

        if (isChief)
        {
            var inspectionResponse = InspectionHandler.GetAll();

            await foreach (var inspection in inspectionResponse)
            {
                _inspections!.Add(inspection.UniqueName, new BusinessObjectInspectionResponse
                {
                    Activated = inspection.Activated,
                    InspectionDisplayName = inspection.DisplayName,
                    InspectionText = inspection.Text,
                    Inspection = inspection.UniqueName,
                    BusinessObject = _businessObject.UniqueName,
                    BusinessObjectDisplayName = _businessObject.DisplayName
                });
                this.StateHasChanged();
            }
        }

        _inspectionBusinessObjects = new Dictionary<string, BusinessObjectInspectionResponse>();

        var inspections = BusinessObjectInspectionHandler.GetAllForBusinessObject(BusinessObject);

        await foreach (var inspection in inspections)
        {
            _inspectionBusinessObjects!.Add(inspection.Inspection, inspection);

            this.StateHasChanged();
        }
    }

    public Task ToggleAssignmentMode()
    {
        _mode = _mode == Mode.AssignmentMode
            ? Mode.ScheduleMode
            : Mode.AssignmentMode;

        return Task.CompletedTask;
    }

    public Task ToggleScheduleMode()
    {
        _mode = Mode.ScheduleMode;

        return Task.CompletedTask;
    }

    public Task ToggleDropMode()
    {
        _mode = _mode == Mode.DropMode
            ? Mode.ScheduleMode
            : Mode.DropMode;

        return Task.CompletedTask;
    }

    public async Task AssignAsync(BusinessObjectInspectionResponse inspection)
    {
        var response = await BusinessObjectInspectionHandler.CreateAsync(
            BusinessObject!,
            new BusinessObjectInspectionRequest
            {
                BusinessObjectDisplayName = inspection.BusinessObjectDisplayName,
                Inspection = inspection.Inspection,
                InspectionDisplayName = inspection.InspectionDisplayName,
                InspectionText = inspection.InspectionText,
                Activated = inspection.Activated
            });

        inspection.ETag = response.ETag;

        _inspectionBusinessObjects!.Add(inspection.Inspection, inspection);
        StateHasChanged();
    }

    public async Task UnassignAsync(BusinessObjectInspectionResponse inspection)
    {
        await BusinessObjectInspectionHandler.DeleteAsync(
            BusinessObject!,
            inspection.Inspection,
            inspection.ETag);

        _inspectionBusinessObjects!.Remove(inspection.Inspection);
        StateHasChanged();
    }

    public void Schedule(BusinessObjectInspectionResponse inspection)
        => NavigationManager.NavigateTo($"/business-objects/{BusinessObject}/inspections/{inspection.Inspection}/schedule");

    public async Task DropAsync(BusinessObjectInspectionResponse inspection)
    {
        var appointment = inspection.AuditSchedule.Appointments.FirstOrDefault();

        if(appointment == null)
        {
            return;
        }

        var response = await BusinessObjectInspectionHandler.CreateAuditOmissionAsync(
            BusinessObject!,
            inspection.Inspection,
            new BusinessObjectInspectionAuditOmissionRequest
            {
                PlannedAuditDate = appointment.PlannedAuditDate,
                PlannedAuditTime = appointment.PlannedAuditTime,
            });

        inspection.AuditSchedule.Appointments = response.Appointments;
        inspection.ETag = response.ETag;
    }
}