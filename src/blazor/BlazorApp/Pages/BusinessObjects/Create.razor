@page "/business-objects/create"
@using Super.Paula.Application.Localization.Exceptions
@using Super.Paula.Application.Operation.Exceptions

@inject ITranslator<Create> Translator
@inject NavigationManager NavigationManager
@inject IBusinessObjectRequestHandler BusinessObjectRequestHandler
@inject IExtensionRequestHandler ExtensionRequestHandler

@attribute [Authorize("OnlyChiefOrObserver")]

<PageTitle>@Translator[$"Create business object"]</PageTitle>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">@Translator[$"Create business object"]</h1>
</div>

<EditForm Model="@_request" OnValidSubmit="@OnValidSubmitAsync">
    <DataAnnotationsValidator/>

    <div class="container-fluid pb-3 mb-3 border-bottom">
        <div class="form-floating mt-3">
            <InputText class="form-control"
                       id="businessObjectUniqueName" @bind-Value="_request.UniqueName" />
            <label for="businessObjectUniqueName">@Translator[$"Unique name"]</label>
        </div>
        <div class="form-floating mt-3">
            <InputText
                class="form-control"
                id="businessObjectDisplayName" @bind-Value="_request.DisplayName"/>
            <label for="businessObjectDisplayName">@Translator[$"Display name"]</label>
        </div>
    </div>

    @if (_extension != null)
    {
        <div class="container-fluid pb-3 mb-3 border-bottom">
            @foreach (var extensionField in _extension.Fields)
            {
                <div class="form-floating mt-3">
                    <input
                        class="form-control"
                        id="@GetExtensionFieldInputId(extensionField)"
                        value="@_request[extensionField.DataName]"
                        @onchange="@(e => _request[extensionField.DataName] = e.Value)"/>
                    <label for="@GetExtensionFieldInputId(extensionField)">@Translator[extensionField.DisplayName]</label>
                </div>
            }
        </div>
    }

    @if (context.GetValidationMessages().Any())
    {
        <div class="container-fluid pb-4 mb-5">
            <div class="card card-body tex-wrap">
                <ValidationSummary/>
            </div>
        </div>
    }
    else
    {
        <div class="container-fluid pb-4 mb-5">
            <AuthorizedButton Policy="OnlyChief"
                              id="submit"
                              type="submit"
                              class="btn btn-sm btn-primary">@Translator[$"Submit"]</AuthorizedButton>
        </div>
    }

</EditForm>

@code {
    private ExtensionResponse? _extension;

    private BusinessObjectRequest _request = new BusinessObjectRequest();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _extension = await ExtensionRequestHandler.GetAsync(ExtensionAggregateTypes.BusinessObject);
        }
        catch (ExtensionNotFoundException) { }
    }

    private async Task OnValidSubmitAsync()
    {
        await BusinessObjectRequestHandler.CreateAsync(_request);
        NavigationManager.NavigateTo("/business-objects");
    }

    private string GetExtensionFieldInputId(ExtensionFieldResponse extensionField)
        => $"businessObject{char.ToUpperInvariant(extensionField.DataName[0])}{extensionField.DataName[1..]}";

}