@page "/business-objects"

@inject ITranslator<View> Translator
@inject NavigationManager NavigationManager
@inject IBusinessObjectRequestHandler BusinessObjectHandler

@attribute [Authorize("OnlyChiefOrObserver")]

<PageTitle>@Translator[$"Business objects"]</PageTitle>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">@Translator[$"Business objects"]</h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <div class="btn-group me-2">
            <button type="button" class="btn btn-sm btn-outline-secondary" title="@Translator[$"Create"]" @onclick="@Create"><span class="oi oi-plus" /></button>
        </div>
        <div class="input-group input-group-sm input-sm me-2">
            <input type="text" class="form-control" placeholder="Search term" @bind="_searchQuery" @onkeyup="SearchTermKeyDownAsync">
        </div>
        <div class="form-check form-check-inline form-switch me-2 align-self-center d-none d-xl-block">
            <input type="checkbox" class="form-check-input" id="onlyUnassigned" checked="@_onlyUnassigned" @onchange="OnlyUnassignedChangedAsync">
            <label class="form-check-label" for="onlyUnassigned">@Translator[$"Unassigned"]</label>
        </div>
    </div>
</div>

<DemoNote>
    @Translator.Markdown($"A business object is any real world object you can think of. Usually this could be a device, a car or a real estate property.")
</DemoNote>

<div class="table-responsive">

    <table class="table table-striped table-sm">
        @if (_initialSearch != null && _initialSearch.TopResults.Count > 0)
        {
            <thead>
                <tr>
                    <th scope="col" class="col-2 d-none d-lg-table-cell">@Translator[$"Unique name"]</th>
                    <th scope="col" class="col-8">@Translator[$"Display name"]</th>
                    <th scope="col" class="col-2 d-none d-sm-table-cell">@Translator[$"Inspector"]</th>
                    <th scope="col"></th>
                    <th scope="col"></th>
                    <th scope="col"></th>
                    <th scope="col"></th>
                </tr>
            </thead>
        }
        <tbody>
            <Virtualize @ref="Container" Context="businessObject" ItemsProvider="@GetItemsProviderResultAsync">
                <tr>
                    <td class="d-none d-lg-table-cell">@businessObject.UniqueName</td>
                    <td>@businessObject.DisplayName</td>
                    <td class="d-none d-sm-table-cell">@businessObject.Inspector</td>
                    <td>
                        <button class="btn btn-sm btn-outline-info btn-block" title="@Translator[$"Edit"]"
                            @onclick="() => Edit(businessObject.UniqueName)"><span class="oi oi-pencil"/></button>
                    </td>
                    <td>
                        <AuthorizedButton Policy="OnlyChief" class="btn btn-sm btn-outline-danger btn-block" title="@Translator[$"Delete"]"
                            @onclick="() => DeleteAsync(businessObject)"><span class="oi oi-trash"/></AuthorizedButton>
                    </td>
                    <td>
                        <button class="btn btn-sm btn-outline-info btn-block" title="@Translator[$"Inspections"]"
                            @onclick="() => NavigateToInspections(businessObject.UniqueName)"><span class="oi oi-list"/></button>
                    </td>
                    <td>
                        <button class="btn btn-sm btn-outline-info btn-block" title="@Translator[$"Audit history"]"
                            @onclick="() => NavigateToInspectionAuditHistory(businessObject.UniqueName)"><span class="oi oi-clipboard"/></button>
                    </td>
                </tr>
            </Virtualize>
        </tbody>
    </table>

</div>

@code {

    private SearchBusinessObjectResponse? _initialSearch;

    private bool _onlyUnassigned = false;

    private string _searchQuery = string.Empty;

    private Virtualize<BusinessObjectResponse>? Container { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await ResetAsync();
    }

    private string SearchQuery()
    {
        var searchQuery = _searchQuery;

        if (_onlyUnassigned)
        {
            searchQuery += "+inspector:\"\"";
        }

        return searchQuery
            .Trim()
            .Trim('+');
    }

    private async Task ResetAsync()
    {
        _initialSearch = null;

        if (Container != null)
        {
            await Container.RefreshDataAsync();
        }

        this.StateHasChanged();            
    }

    private async Task<IEnumerable<BusinessObjectResponse>> QueryAsync(string searchQuery, int skip, int take, 
        CancellationToken cancellationToken = default)
    {
        var response = BusinessObjectHandler.GetAll(searchQuery, skip, take, cancellationToken);

        var result = new List<BusinessObjectResponse>();

        await foreach (var item in response)
        {
            result.Add(item);
        }

        return result;
    }

    private async ValueTask<ItemsProviderResult<BusinessObjectResponse>> GetItemsProviderResultAsync(ItemsProviderRequest request)
    {
        if (request.StartIndex == 0 || _initialSearch == null)
        {
            _initialSearch = await BusinessObjectHandler.SearchAsync(SearchQuery());
            this.StateHasChanged(); 
        }

        var totalCount = _initialSearch.TotalCount;

        var businessObjects = new List<BusinessObjectResponse>();

        if (request.StartIndex == 0)
        {
            businessObjects.AddRange(
                _initialSearch.TopResults
                    .Skip(request.StartIndex)
                    .Take(request.Count)
                    .ToList());
        } 

        if(businessObjects.Count < request.Count)
        {
            businessObjects.AddRange(
                await QueryAsync(SearchQuery(), 
                    request.StartIndex + businessObjects.Count, 
                    request.Count - businessObjects.Count, 
                    request.CancellationToken));
        }

        return new ItemsProviderResult<BusinessObjectResponse>(businessObjects, totalCount);
    }

    private async Task OnlyUnassignedChangedAsync(ChangeEventArgs e)
    {
        _onlyUnassigned = (bool)e.Value!;
        await ResetAsync();
    }

    public async Task SearchTermKeyDownAsync(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await ResetAsync();
        }
    }

    public void Create()
        => NavigationManager.NavigateTo("/business-objects/create");

    public void Edit(string businessObject)
        => NavigationManager.NavigateTo($"/business-objects/{businessObject}/edit");

    public async Task DeleteAsync(BusinessObjectResponse businessObject) 
    {
        await BusinessObjectHandler.DeleteAsync(businessObject.UniqueName, businessObject.ETag);
        await ResetAsync();
    }

    public void NavigateToInspections(string businessObject)
        => NavigationManager.NavigateTo($"/business-objects/{businessObject}/inspections");
    
    public void NavigateToInspectionAuditHistory(string businessObject)
        => NavigationManager.NavigateTo($"/business-objects/{businessObject}/audit-history");

}