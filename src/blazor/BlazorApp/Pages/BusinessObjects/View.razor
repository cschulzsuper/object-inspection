@page "/business-objects"

@inject ITranslator Translator
@inject NavigationManager NavigationManager
@inject IBusinessObjectHandler BusinessObjectHandler

@attribute [Authorize("ManagementRead")]

<div class="container-fluid">
    <h1>@Translator["Business objects"]</h1>
</div>

<div class="container-fluid d-flex align-items-center mt-2 mb-2">
    <button class="btn btn-primary mr-4" title="@Translator["Create"]"
            @onclick="Create"><span class="oi oi-plus"/></button>
    <div class="input-group mr-xl-4">
        <input type="text" class="form-control" placeholder="Search term" @bind="_searchQuery" @onkeyup="SearchTermKeyDownAsync">
    </div>
    <div class="custom-control custom-switch d-none d-xl-block">
        <input type="checkbox" class="custom-control-input" id="onlyUnassigned" checked="@_onlyUnassigned" @onchange="OnlyUnassignedChangedAsync">
        <label class="custom-control-label" for="onlyUnassigned">@Translator["Unassigned"]</label>
    </div>
</div>  

<div class="container-fluid">

<table class="table table-sm">
    @if (_initialSearch != null && _initialSearch.TopResults.Count > 0)
    {
        <thead class="table-light table-borderless">
            <tr>
                <th class="col-3 d-none d-lg-table-cell">@Translator["Unique name"]</th>
                <th class="col-6">@Translator["Display name"]</th>
                <th class="col-3 d-none d-lg-table-cell">@Translator["Inspector"]</th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
    }
    <tbody>
        <Virtualize @ref="Container" Context="businessObject" ItemsProvider="@GetItemsProviderResultAsync">
            <tr>
                <td class="d-none d-lg-table-cell">@businessObject.UniqueName</td>
                <td>@businessObject.DisplayName</td>
                <td class="d-none d-lg-table-cell">@businessObject.Inspector</td>
                <td>
                    <button class="btn btn-outline-info btn-block" title="@Translator["Edit"]"
                        @onclick="() => Edit(businessObject.UniqueName)"><span class="oi oi-pencil"/></button>
                </td>
                <td>
                    <AuthorizedButton Policy="ManagementFull" class="btn btn-outline-danger btn-block" title="@Translator["Delete"]"
                        @onclick="() => DeleteAsync(businessObject)"><span class="oi oi-trash"/></AuthorizedButton>
                </td>
                <td>
                    <button class="btn btn-outline-info btn-block" title="@Translator["Inspections"]"
                        @onclick="() => NavigateToInspections(businessObject.UniqueName)"><span class="oi oi-list"/></button>
                </td>
                <td>
                    <button class="btn btn-outline-info btn-block" title="@Translator["Audit history"]"
                        @onclick="() => NavigateToInspectionAuditHistory(businessObject.UniqueName)"><span class="oi oi-clipboard"/></button>
                </td>
            </tr>
        </Virtualize>
    </tbody>
</table>

</div>

@code {

    private SearchBusinessObjectResponse? _initialSearch;

    private bool _onlyUnassigned = false;

    private string _searchQuery = string.Empty;

    private Virtualize<BusinessObjectResponse>? Container { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await ResetAsync();
    }

    private string SearchQuery()
    {
        var searchQuery = _searchQuery;

        if (_onlyUnassigned)
        {
            searchQuery += "+inspector:\"\"";
        }

        return searchQuery
            .Trim()
            .Trim('+');
    }

    private async Task ResetAsync()
    {
        _initialSearch = null;

        if (Container != null)
        {
            await Container.RefreshDataAsync();
        }

        this.StateHasChanged();            
    }

    private async Task<IEnumerable<BusinessObjectResponse>> QueryAsync(string searchQuery, int skip, int take, 
        CancellationToken cancellationToken = default)
    {
        var response = BusinessObjectHandler.GetAll(searchQuery, skip, take, cancellationToken);

        var result = new List<BusinessObjectResponse>();

        await foreach (var item in response)
        {
            result.Add(item);
        }

        return result;
    }

    private async ValueTask<ItemsProviderResult<BusinessObjectResponse>> GetItemsProviderResultAsync(ItemsProviderRequest request)
    {
        if (request.StartIndex == 0 || _initialSearch == null)
        {
            _initialSearch = await BusinessObjectHandler.SearchAsync(SearchQuery());
            this.StateHasChanged(); 
        }

        var totalCount = _initialSearch.TotalCount;

        var businessObjects = new List<BusinessObjectResponse>();

        if (request.StartIndex == 0)
        {
            businessObjects.AddRange(
                _initialSearch.TopResults
                    .Skip(request.StartIndex)
                    .Take(request.Count)
                    .ToList());
        } 

        if(businessObjects.Count < request.Count)
        {
            businessObjects.AddRange(
                await QueryAsync(SearchQuery(), 
                    request.StartIndex + businessObjects.Count, 
                    request.Count - businessObjects.Count, 
                    request.CancellationToken));
        }

        return new ItemsProviderResult<BusinessObjectResponse>(businessObjects, totalCount);
    }

    private async Task OnlyUnassignedChangedAsync(ChangeEventArgs e)
    {
        _onlyUnassigned = (bool)e.Value!;
        await ResetAsync();
    }

    public async Task SearchTermKeyDownAsync(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await ResetAsync();
        }
    }

    public void Create()
        => NavigationManager.NavigateTo("/business-objects/create");

    public void Edit(string businessObject)
        => NavigationManager.NavigateTo($"/business-objects/{businessObject}/edit");

    public async Task DeleteAsync(BusinessObjectResponse businessObject) 
    {
        await BusinessObjectHandler.DeleteAsync(businessObject.UniqueName, businessObject.ETag);
        await ResetAsync();
    }

    public void NavigateToInspections(string businessObject)
        => NavigationManager.NavigateTo($"/business-objects/{businessObject}/inspections");
    
    public void NavigateToInspectionAuditHistory(string businessObject)
        => NavigationManager.NavigateTo($"/business-objects/{businessObject}/audit-history");

}