@page "/inspectors/{inspector}/edit"

@inject ITranslator<Edit> Translator
@inject NavigationManager NavigationManager
@inject IInspectorRequestHandler InspectorRequestHandler

@attribute [Authorize("ManagementRead")]

<div class="container-fluid">
    <h1>@Translator[$"Edit inspectors"]</h1>
</div>

@if (_request == null)
{
    <p><em>Loading...</em></p>
}
else 
{
    <EditForm Model="@_request" OnValidSubmit="@OnValidSubmitAsync">
        <DataAnnotationsValidator />

        <div class="container-fluid">
            <div class="form-group">
                <label>@Translator[$"Unique name"]</label>
                <InputText class="form-control" id="inspectorUniqueName" @bind-Value="_request.UniqueName" readonly/>
            </div>
            <div class="form-group">
                <label>@Translator[$"Identity"]</label>
                <InputText class="form-control" id="inspectorIdentity" @bind-Value="_request.Identity" />
            </div>
            <div class="form-check">
                <InputCheckbox class="form-check-input" id="inspectorActivated" @bind-Value="_request.Activated"
                    disabled="@(_request.UniqueName == _inspector)"/>
                <label class="form-check-label" for="inspectorActivated">@Translator[$"Activated"]</label>     
            </div>
        </div>

        @if(context.GetValidationMessages().Any())
{
    <div class="container-fluid">
                <div class="card card-body tex-wrap">
                    <ValidationSummary />    
                </div>
            </div>
} 
else 
{
    <div class="container-fluid">
                <AuthorizedButton Policy="ManagementFull" 
                    id="submit"
                    type="submit" 
                    class="btn btn-primary">@Translator[$"Submit"]</AuthorizedButton>
            </div>
}

    </EditForm>
}

@code {

[Parameter]
public string Inspector { get; set; } = string.Empty;

private InspectorRequest? _request = null;

[CascadingParameter]
public Task<AuthenticationState> AuthenticationState { get; set; } = null!;

private string? _inspector;

protected override async Task OnParametersSetAsync()
{
_inspector = (await AuthenticationState).User.GetInspector();
}

protected override async Task OnAfterRenderAsync(bool firstRender)
{
if (firstRender)
{
    var response = await InspectorRequestHandler.GetAsync(Inspector);

    _request = new InspectorRequest
        {
            Identity = response.Identity,
            UniqueName = response.UniqueName,
            Activated = response.Activated,
            ETag = response.ETag
        };

    StateHasChanged();
}
}

private async Task OnValidSubmitAsync()
{
await InspectorRequestHandler.ReplaceAsync(Inspector, _request!);
NavigationManager.NavigateTo("/inspectors");
}
}