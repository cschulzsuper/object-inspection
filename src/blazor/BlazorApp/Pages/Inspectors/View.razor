@page "/inspectors"
@page "/organizations/{organization}/inspectors"

@inject ITranslator Translator
@inject NavigationManager NavigationManager
@inject IAccountHandler AccountHandler
@inject AppAuthentication AppAuthentication
@inject IInspectorHandler InspectorHandler
@inject IOrganizationHandler OrganizationHandler


@attribute [Authorize("ChiefInspector")]

<div class="container mt-2 mt-md-3">
    <h1>@Translator["Inspectors"]</h1>
</div>

<div class="container mt-2 mt-md-3">
    <button class="btn btn-primary"
        @onclick="() => Create()">@Translator["Create"]</button>
</div>

<div class="container mt-2 mt-md-3">

@if (_inspectors == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>@Translator["Unique name"]</th>
                <th>@Translator["Identity"]</th>
                @if (Organization == null)
                {
                    <th></th>
                    <th></th>
                    <th></th>
                }
                <AuthorizeView Policy="Maintainer">
                    <Authorized>
                        <th></th>
                    </Authorized>
                </AuthorizeView>
            </tr>
        </thead>
        <tbody>
            @foreach (var inspector in _inspectors.Values)
            {
                <tr>
                    <td>@inspector.UniqueName</td>
                    <td>@inspector.Identity</td>
                    @if(Organization == null)
                    {
                        @if(inspector.Activated)
                        {
                            <td>
                                @if (inspector.UniqueName != AppAuthentication.Inspector)
                                {
                                    <button class="btn btn-primary btn-block" 
                                        @onclick="() => DeactivateAsync(inspector.UniqueName)">@Translator["Deactivate"]</button>
                                }
                            </td>
                        } else {
                            <td>
                                @if (inspector.UniqueName != AppAuthentication.Inspector)
                                {
                                    <button class="btn btn-outline-primary btn-block" 
                                        @onclick="() => ActivateAsync(inspector.UniqueName)">@Translator["Activate"]</button>
                                }
                            </td>
                        }
                        <td>
                            <button class="btn btn-outline-info btn-block" 
                                @onclick="() => Edit(inspector.UniqueName)">@Translator["Edit"]</button>
                        </td>
                        <td>
                            @if (inspector.UniqueName != AppAuthentication.Inspector)
                            {
                                <button class="btn btn-outline-danger btn-block" 
                                    @onclick="() => DeleteAsync(inspector.UniqueName)">@Translator["Delete"]</button>
                            }
                        </td>
                    }
                    <AuthorizeView Policy="Maintainer">
                        <Authorized>
                            <td>
                                @if (inspector.Activated &&
                                     _organization?.Activated == true &&
                                     inspector.UniqueName != AppAuthentication.Inspector)
                                {
                                    <button class="btn btn-outline-danger btn-block" 
                                    @onclick="() => ImpersonateAsync(inspector.UniqueName)">@Translator["Impersonate"]</button>
                                }
                            </td>
                        </Authorized>
                    </AuthorizeView>
                    
                </tr>
            }
        </tbody>
    </table>
}

</div>

@code {

    [Parameter]
    public string? Organization { get; set; }

    private OrganizationResponse? _organization;

    private IDictionary<string,InspectorResponse>? _inspectors;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _inspectors = new Dictionary<string, InspectorResponse>();

            if (Organization != null)
            {
                _organization = await OrganizationHandler.GetAsync(Organization);
            }            

            var response = Organization == null
                ? InspectorHandler.GetAll()
                : InspectorHandler.GetAllForOrganization(Organization);

            await foreach (var inspector in response)
            {
                _inspectors.Add(inspector.UniqueName, inspector);
                StateHasChanged();
            }

            StateHasChanged();
        }
    }

    public void Create()
        => NavigationManager.NavigateTo("/inspectors/create");

    public void Edit(string inspector)
        => NavigationManager.NavigateTo($"/inspectors/{inspector}/edit");

    public async Task DeleteAsync(string inspector) 
    {
        await InspectorHandler.DeleteAsync(inspector);
        _inspectors!.Remove(inspector);
    }

    public async Task ActivateAsync(string inspector) {
        await InspectorHandler.ActivateAsync(inspector);
        _inspectors![inspector].Activated = true;
    }

    public async Task DeactivateAsync(string inspector)
    {
        await InspectorHandler.DeactivateAsync(inspector);
        _inspectors![inspector].Activated = false;
    }

    public async Task ImpersonateAsync(string inspector)
    {
        await AccountHandler.StartImpersonationAsync(new StartImpersonationRequest
        {
            UniqueName = inspector,
            Organization = Organization ?? AppAuthentication.Organization
        });

        NavigationManager.NavigateTo("/");
    }
}