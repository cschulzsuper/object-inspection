@page "/inspectors"

@inject IAuthorizationRequestHandler AuthorizationRequestHandler
@inject IInspectorRequestHandler InspectorRequestHandler
@inject ITranslator<View> Translator
@inject NavigationManager NavigationManager

@attribute [Authorize("OnlyChiefOrObserver")]

<PageTitle>@Translator[$"Inspectors"]</PageTitle>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">@Translator[$"Inspectors"]</h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <div class="btn-group me-2">
            <button type="button" class="btn btn-sm btn-outline-secondary" title="@Translator[$"Create"]" @onclick="@Create"><span class="oi oi-plus" /></button>
        </div>
    </div>
</div>

<DemoNote>
    @Translator.Markdown($"An inspector is a person that can be assigned to a business object. Assigned inspectors conduct the auditing of the business object.")
</DemoNote>

<div class="table-responsive">

    @if (_inspectors == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped table-sm">

            <thead>
            <tr>
                <th scope="col" class="col-6">@Translator[$"Unique name"]</th>
                <th scope="col" class="col-6">@Translator[$"Identity"]</th>
                <th scope="col"></th>
                <th scope="col"></th>
                <th scope="col"></th>
            </tr>
            </thead>

            <tbody>
            @foreach (var inspector in _inspectors.Values)
        {
            <tr>
                    <td>@inspector.UniqueName</td>
                    <td>@inspector.Identity</td>
                    @if (inspector.Activated)
                {
                    <td>
                            @if (inspector.UniqueName != _inspector)
                        {
                            <AuthorizedButton Policy="OnlyChief" class="btn btn-sm btn-success btn-block" title="@Translator[$"Deactivate"]"
                                                  @onclick="() => DeactivateAsync(inspector)"><span class="oi oi-power-standby"/></AuthorizedButton>
                        }
                        </td>
                }
                else
                {
                    <td>
                            @if (inspector.UniqueName != _inspector)
                        {
                            <AuthorizedButton Policy="OnlyChief" class="btn btn-sm btn-outline-danger btn-block" title="@Translator[$"Activate"]"
                                                  @onclick="() => ActivateAsync(inspector)"><span class="oi oi-power-standby"/></AuthorizedButton>
                        }
                        </td>
                }
                    <td>
                        <button class="btn btn-sm btn-outline-info btn-block" title="@Translator[$"Edit"]"
                                @onclick="() => Edit(inspector.UniqueName)"><span class="oi oi-pencil"/></button>
                    </td>
                    <td>
                        @if (inspector.UniqueName != _inspector)
                    {
                        <AuthorizedButton Policy="OnlyChief" class="btn btn-sm btn-outline-danger btn-block" title="@Translator[$"Delete"]"
                                              @onclick="() => DeleteAsync(inspector)"><span class="oi oi-trash"/></AuthorizedButton>
                    }
                    </td>
                </tr>
        }
            </tbody>
        </table>
}
</div>

@code {

private IDictionary<string, InspectorResponse>? _inspectors;

[CascadingParameter]
public Task<AuthenticationState> AuthenticationState { get; set; } = null!;

private string? _inspector;

protected override async Task OnParametersSetAsync()
{
    _inspector = (await AuthenticationState).User.Claims.GetInspector();
}

protected override async Task OnAfterRenderAsync(bool firstRender)
{
    if (firstRender)
    {
        _inspectors = new Dictionary<string, InspectorResponse>();

        var response = InspectorRequestHandler.GetAll();

        await foreach (var inspector in response)
        {
            _inspectors.Add(inspector.UniqueName, inspector);
            StateHasChanged();
        }

        StateHasChanged();
    }
}

public void Create()
    => NavigationManager.NavigateTo("/inspectors/create");

public void Edit(string inspector)
    => NavigationManager.NavigateTo($"/inspectors/{inspector}/edit");

public async Task DeleteAsync(InspectorResponse inspector)
{
    await InspectorRequestHandler.DeleteAsync(inspector.UniqueName, inspector.ETag);

    _inspectors!.Remove(inspector.UniqueName);
}

public async Task ActivateAsync(InspectorResponse inspector)
{
    var response = await InspectorRequestHandler.ActivateAsync(inspector.UniqueName, inspector.ETag);

    _inspectors![inspector.UniqueName].Activated = true;
    _inspectors![inspector.UniqueName].ETag = response.ETag;
}

public async Task DeactivateAsync(InspectorResponse inspector)
{
    var response = await InspectorRequestHandler.DeactivateAsync(inspector.UniqueName, inspector.ETag);

    _inspectors![inspector.UniqueName].Activated = false;
    _inspectors![inspector.UniqueName].ETag = response.ETag;
}
}