@page "/change-secret"

@inject ITranslator<ChangeSecret> Translator
@inject IAuthenticationRequestHandler AuthenticationHandler
@inject NavigationManager NavigationManager

@attribute [Authorize]

<div class="container-fluid">
    <h1>@Translator[$"Change password"]</h1>
</div>

<EditForm Model="@model" OnValidSubmit="OnValidSubmitAsync">
    <DataAnnotationsValidator />

    <div class="container-fluid">
        <div class="form-group">
            <label>@Translator[$"Old password"]</label>
            <InputText class="form-control" id="oldSecret" @bind-Value="model.OldSecret" type="password" />
            
        </div>
        <div class="form-group">
            <label>@Translator[$"New password"]</label>
            <InputText class="form-control" id="newSecret" @bind-Value="model.NewSecret" type="password"/>
        </div>
    </div>

    @if(context.GetValidationMessages().Any())
{
    <div class="container-fluid">
            <div class="card card-body tex-wrap">
                <ValidationSummary />    
            </div>
        </div>
} 
else 
{
    <div class="container-fluid">
            <AuthorizedButton Policy="AuditingFull" type="submit" class="btn btn-primary">@Translator[$"Submit"]</AuthorizedButton>
        </div>
}

</EditForm>

@code {
private ChangeIdentitySecretRequest model = new ChangeIdentitySecretRequest();

private async Task OnValidSubmitAsync()
{
await AuthenticationHandler.ChangeSecretAsync(model);
NavigationManager.NavigateTo("/");
}
}