@page "/business-objects/{businessObject}/inspections/{inspection}/schedule"

@inject ITranslator Translator
@inject NavigationManager NavigationManager
@inject IBusinessObjectInspectionHandler BusinessObjectInspectionHandler

@attribute [Authorize("ManagementRead")]

<div class="container-fluid">
    <h1>@Translator[$"Schedule inspection"]</h1>
</div>

@if (_request == null)
{
    <p><em>Loading...</em></p>
}
else 
{
    <EditForm Model="@_request" OnValidSubmit="@OnValidSubmitAsync">
        <DataAnnotationsValidator />

        <div class="container-fluid">
            <div class="form-group">
                <label>@Translator[$"Audit schedule"]</label>
                <InputText class="form-control" id="schedule" @bind-Value="_request.Schedule"/>
            </div>
            <div class="form-group">
                <label>@Translator[$"Upcoming audit threshold"] (@TimeSpan.FromMilliseconds(_request.Threshold).ToString("c"))</label>
                <InputMilliseconds class="form-control" id="threshold"  @bind-Value="_request.Threshold" step="1"/>
            </div>
        </div>

        @if(context.GetValidationMessages().Any())
        {
            <div class="container-fluid">
                <div class="card card-body tex-wrap">
                    <ValidationSummary />    
                </div>
            </div>
        } 
        else 
        {
            <div class="container-fluid">
                <AuthorizedButton Policy="ManagementFull" id="submit" type="submit" class="btn btn-primary">@Translator[$"Submit"]</AuthorizedButton>
            </div>
        }

    </EditForm>
}

@code {

    [Parameter]
    public string BusinessObject { get; set; } = string.Empty;

    [Parameter]
    public string Inspection { get; set; } = string.Empty;

    private BusinessObjectInspectionAuditScheduleRequest? _request = null;

    protected override async Task OnInitializedAsync()
    {
        var response = await BusinessObjectInspectionHandler.GetAsync(BusinessObject, Inspection);

        if (response != null)
        {
            var expression = response.AuditSchedule.Expressions.FirstOrDefault();

            _request = new BusinessObjectInspectionAuditScheduleRequest
            {
                Threshold = response.AuditSchedule.Threshold,
                Schedule = expression?.CronExpression ?? string.Empty,
                ETag = response.ETag
            };
        }
    }

    private async Task OnValidSubmitAsync()
    {
        await BusinessObjectInspectionHandler.ReplaceAuditScheduleAsync(BusinessObject, Inspection, _request!);
        NavigationManager.NavigateTo($"/business-objects/{BusinessObject}/inspections");
    }
}