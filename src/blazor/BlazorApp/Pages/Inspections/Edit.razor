@page "/inspections/{inspection}/edit"

@inject ITranslator Translator
@inject NavigationManager NavigationManager
@inject IInspectionHandler InspectionHandler

@attribute [Authorize("ChiefInspector")]

<div class="container mt-2 mt-md-3">
    <h1>@Translator["Edit inspection"]</h1>
</div>

@if (_request == null)
{
    <p><em>Loading...</em></p>
}
else 
{
    <EditForm Model="@_request" OnValidSubmit="@OnValidSubmitAsync">
        <DataAnnotationsValidator />

        <div class="container mt-2 mt-md-3">
            <div class="form-group">
                <label>@Translator["Unique name"]</label>
                <InputText class="form-control" id="uniqueName" @bind-Value="_request.UniqueName" readonly/>
            </div>
            <div class="form-group">
                <label>@Translator["Display name"]</label>
                <InputText class="form-control" id="displayName" @bind-Value="_request.DisplayName" />
            </div>
            <div class="form-group">
                <label>@Translator["Text"]</label>
                <InputTextArea class="form-control" id="text" rows="6" @bind-Value="_request.Text" />
            </div>
            <div class="form-check">
                <InputCheckbox class="form-check-input" id="activated" @bind-Value="_request.Activated"/>
                <label class="form-check-label" for="activated">@Translator["Activated"]</label>     
            </div>
        </div>

        @if(context.GetValidationMessages().Any())
        {
            <div class="container mt-2 mt-md-3">
                <div class="card card-body tex-wrap">
                    <ValidationSummary />    
                </div>
            </div>
        } 
        else 
        {
            <div class="container mt-2 mt-md-3">
                <button type="submit" class="btn btn-primary">@Translator["Submit"]</button>
            </div>
        }

    </EditForm>
}

@code {

    [Parameter]
    public string Inspection { get; set; } = string.Empty;

    private InspectionRequest? _request = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var response = await InspectionHandler.GetAsync(Inspection);

            _request = new InspectionRequest
                {
                    Activated = response.Activated,
                    DisplayName = response.DisplayName,
                    Text = response.Text,
                    UniqueName = response.UniqueName
                };

            StateHasChanged();
        }
    }

    private async Task OnValidSubmitAsync()
    {
        await InspectionHandler.ReplaceAsync(Inspection, _request!);
        NavigationManager.NavigateTo("/inspections");
    }
}