@page "/inspections/{inspection}/edit"

@inject ITranslator<Edit> Translator
@inject NavigationManager NavigationManager
@inject IInspectionRequestHandler InspectionRequestHandler

@attribute [Authorize("ManagementRead")]

<PageTitle>@Translator[$"Edit inspection"]</PageTitle>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">@Translator[$"Edit inspection"]</h1>
</div>

@if (_request == null)
{
    <p><em>Loading...</em></p>
}
else 
{
    <EditForm Model="@_request" OnValidSubmit="@OnValidSubmitAsync">
        <DataAnnotationsValidator />

        <div class="container-fluid pb-3 mb-3 border-bottom">
            <div class="form-floating mt-3">
                <InputText class="form-control" id="inspectionUniqueName" @bind-Value="_request.UniqueName" readonly />
                <label for="inspectionUniqueName">@Translator[$"Unique name"]</label>
            </div>
            <div class="form-floating mt-3">
                <InputText class="form-control" id="inspectionDisplayName" @bind-Value="_request.DisplayName" />
                <label for="inspectionDisplayName">@Translator[$"Display name"]</label>
            </div>
            <div class="form-floating mt-3">
                <InputTextArea class="form-control text-area" id="inspectionText" @bind-Value="_request.Text" />
                <label for="inspectionText">@Translator[$"Text"]</label>
            </div>
            <div class="form-check mt-3">
                <InputCheckbox class="form-check-input" id="inspectionActivated" @bind-Value="_request.Activated" />
                <label class="form-check-label" for="inspectionActivated">@Translator[$"Activated"]</label>
            </div>
        </div>

        @if (context.GetValidationMessages().Any())
        {
            <div class="container-fluid pb-4 mb-5">
                <div class="card card-body tex-wrap">
                    <ValidationSummary/>
                </div>
            </div>
        }
        else
        {
            <div class="container-fluid pb-4 mb-5">
                <AuthorizedButton Policy="ManagementFull" type="submit" class="btn btn-sm btn-primary">@Translator[$"Submit"]</AuthorizedButton>
            </div>
        }
    </EditForm>
}

@code {

    [Parameter]
    public string Inspection { get; set; } = string.Empty;

    private InspectionRequest? _request = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var response = await InspectionRequestHandler.GetAsync(Inspection);

            _request = new InspectionRequest
            {
                ETag = response.ETag,
                Activated = response.Activated,
                DisplayName = response.DisplayName,
                Text = response.Text,
                UniqueName = response.UniqueName
            };

            StateHasChanged();
        }
    }

    private async Task OnValidSubmitAsync()
    {
        await InspectionRequestHandler.ReplaceAsync(Inspection, _request!);
        NavigationManager.NavigateTo("/inspections");
    }

}