@page "/inspections"

@inject ITranslator<View> Translator
@inject NavigationManager NavigationManager
@inject IInspectionRequestHandler InspectionHandler

@attribute [Authorize("OnlyChiefOrObserver")]

<PageTitle>@Translator[$"Inspections"]</PageTitle>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">@Translator[$"Inspections"]</h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <div class="btn-group me-2">
            <button type="button" class="btn btn-sm btn-outline-secondary" title="@Translator[$"Create"]" @onclick="@Create"><span class="oi oi-plus" /></button>
        </div>
    </div>
</div>

<DemoNote>
    @Translator.Markdown($"An inspection is a definition for a check, which is conducted against a business object.")
</DemoNote>

<div class="table-responsive">

    @if (_inspections == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table table-striped table-sm">

            <thead>
            <tr>
                <th scope="col" class="col-3 d-none d-md-table-cell">@Translator[$"Unique name"]</th>
                <th scope="col" class="col-9">@Translator[$"Display name"]</th>
                <th scope="col"></th>
                <th scope="col"></th>
                <th scope="col"></th>
            </tr>
            </thead>

            <tbody>
            @foreach (var inspection in _inspections.Values)
            {
                <tr>
                    <td class="d-none d-md-table-cell">@inspection.UniqueName</td>
                    <td>
                        <button class="btn btn-sm btn-outline-secondary btn-block rounded-0 text-start w-100"
                                @onclick="() => ToggleTextVisibility(inspection.UniqueName)">@inspection.DisplayName</button>

                            @if (_inspectionsTextVisibile?[inspection.UniqueName] == true && !string.IsNullOrWhiteSpace(inspection.Text))
                            {
                                <div class="card card-body text-wrap rounded-0">
                                    @inspection.Text
                                </div>
                            }
                    </td>

                    @if (inspection.Activated)
                    {
                        <td>
                            <AuthorizedButton Policy="OnlyChief" class="btn btn-sm btn-success btn-block" title="@Translator[$"Deactivate"]"
                                              @onclick="() => DeactivateAsync(inspection)"><span class="oi oi-power-standby"/></AuthorizedButton>
                        </td>
                    }
                    else
                    {
                        <td>
                            <AuthorizedButton Policy="OnlyChief" class="btn btn-sm btn-outline-danger btn-block" title="@Translator[$"Activate"]"
                                              @onclick="() => ActivateAsync(inspection)"><span class="oi oi-power-standby"/></AuthorizedButton>
                        </td>
                    }
                    <td>
                        <button class="btn btn-sm btn-outline-info btn-block" title="@Translator[$"Edit"]"
                                @onclick="() => Edit(inspection.UniqueName)"><span class="oi oi-pencil"/></button>
                    </td>
                    <td >
                        <AuthorizedButton Policy="OnlyChief" class="btn btn-sm btn-outline-danger btn-block" title="@Translator[$"Delete"]"
                                          @onclick="() => DeleteAsync(inspection)"><span class="oi oi-trash"/></AuthorizedButton>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }

</div>

@code {

    private IDictionary<string, InspectionResponse>? _inspections;

    private IDictionary<string, bool>? _inspectionsTextVisibile;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _inspections = new Dictionary<string, InspectionResponse>();

            var response = InspectionHandler.GetAll();

            await foreach (var inspection in response)
            {
                _inspections.Add(inspection.UniqueName, inspection);
                StateHasChanged();
            }

            _inspectionsTextVisibile = _inspections.Keys
                .ToDictionary(key => key, _ => false);

            StateHasChanged();
        }
    }

    public void Create()
        => NavigationManager.NavigateTo("/inspections/create");

    public void Edit(string inspection)
        => NavigationManager.NavigateTo($"/inspections/{inspection}/edit");

    public async Task DeleteAsync(InspectionResponse inspection)
    {
        await InspectionHandler.DeleteAsync(inspection.UniqueName, inspection.ETag);
        _inspections!.Remove(inspection.UniqueName);
    }

    public async Task ActivateAsync(InspectionResponse inspection)
    {
        var response = await InspectionHandler.ActivateAsync(inspection.UniqueName, inspection.ETag);

        inspection.Activated = true;
        inspection.ETag = response.ETag;
    }

    public async Task DeactivateAsync(InspectionResponse inspection)
    {
        var response = await InspectionHandler.DeactivateAsync(inspection.UniqueName, inspection.ETag);

        inspection.Activated = false;
        inspection.ETag = response.ETag;
    }

    private void ToggleTextVisibility(string inspection)
    {
        if (_inspectionsTextVisibile != null)
        {
            _inspectionsTextVisibile[inspection] = !_inspectionsTextVisibile[inspection];
        }
    }

}