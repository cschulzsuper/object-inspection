@page "/inspections"

@inject ITranslator Translator
@inject NavigationManager NavigationManager
@inject IInspectionHandler InspectionHandler

@attribute [Authorize("ChiefInspector")]

<div class="container-fluid">
    <h1>@Translator["Inspections"]</h1>
</div>

<div class="container-fluid m-2">
    <button class="btn btn-primary"
            @onclick="Create"><span class="oi oi-plus"/></button>
</div>

<div class="container-fluid">

@if (_inspections == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-sm">
        <thead>
            <tr>
                <th>@Translator["Unique name"]</th>
                <th>@Translator["Display name"]</th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var inspection in _inspections.Values)
            {
                <tr>
                    <td class="col-2">@inspection.UniqueName</td>
                    <td class="col-7">
                        <button class="btn btn-outline-secondary btn-block text-left" 
                                @onclick="() => ToggleTextVisibility(inspection.UniqueName)">@inspection.DisplayName</button>

                        @if (_inspectionsTextVisibile?[inspection.UniqueName] == true && !string.IsNullOrWhiteSpace(inspection.Text))
                        {
                            <div class="card card-body text-wrap">
                                @inspection.Text
                            </div>
                        }
                    </td>
                    
                    @if(inspection.Activated) {
                        <td class="col-1">
                            <button class="btn btn-success btn-block" 
                                @onclick="() => DeactivateAsync(inspection.UniqueName)"><span class="oi oi-power-standby"/></button>
                        </td>
                    } else {
                        <td class="col-1">
                            <button class="btn btn-outline-danger btn-block" 
                                @onclick="() => ActivateAsync(inspection.UniqueName)"><span class="oi oi-power-standby"/></button>
                        </td>
                    }
                    <td class="col-1">
                        <button class="btn btn-outline-info btn-block" 
                            @onclick="() => Edit(inspection.UniqueName)"><span class="oi oi-pencil"/></button>
                    </td>
                    <td class="col-1">
                        <button class="btn btn-outline-danger btn-block" 
                            @onclick="() => DeleteAsync(inspection.UniqueName)"><span class="oi oi-trash"/></button>
                    </td>
                    
                </tr>
            }
        </tbody>
    </table>
}

</div>

@code {

    private IDictionary<string,InspectionResponse>? _inspections;

    private IDictionary<string,bool>? _inspectionsTextVisibile;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _inspections = new Dictionary<string, InspectionResponse>();

            var response = InspectionHandler.GetAll();

            await foreach (var inspection in response)
            {
                _inspections.Add(inspection.UniqueName, inspection);
                StateHasChanged();
            }

            _inspectionsTextVisibile = _inspections.Keys
                .ToDictionary(key => key, _ => false);

            StateHasChanged();
        }
    }

    public void Create()
        => NavigationManager.NavigateTo("/inspections/create");

    public void Edit(string inspection)
        => NavigationManager.NavigateTo($"/inspections/{inspection}/edit");

    public async Task DeleteAsync(string inspection)
    {
        await InspectionHandler.DeleteAsync(inspection);
        _inspections!.Remove(inspection);
    }

    public async Task ActivateAsync(string inspection) 
    {
        await InspectionHandler.ActivateAsync(inspection);
        _inspections![inspection].Activated = true;
    }

    public async Task DeactivateAsync(string inspection) 
    {
        await InspectionHandler.DeactivateAsync(inspection);
        _inspections![inspection].Activated = false;
    }

    private void ToggleTextVisibility(string inspection)
    {
        if (_inspectionsTextVisibile != null)
        {
            _inspectionsTextVisibile[inspection] = !_inspectionsTextVisibile[inspection];
        }
    }
}