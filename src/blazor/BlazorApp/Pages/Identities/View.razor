@page "/identities"
@using ChristianSchulz.ObjectInspection.Application.Authentication
@using ChristianSchulz.ObjectInspection.Application.Authentication.Responses

@inject ITranslator<View> Translator
@inject NavigationManager NavigationManager
@inject IIdentityRequestHandler IdentityHandler
@inject IAuthenticationRequestHandler AuthenticationHandler

@attribute [Authorize("OnlyMaintainer")]

<PageTitle>@Translator[$"Identities"]</PageTitle>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">@Translator[$"Identities"]</h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <div class="btn-group me-2">
            <button type="button" class="btn btn-sm btn-outline-secondary" title="@Translator[$"Create"]" @onclick="@Create"><span class="oi oi-plus" /></button>
        </div>
    </div>
</div>

<div class="table-responsive">

    @if (_identities == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped table-sm">

            <thead>
            <tr>
                <th scope="col" class="col-6">@Translator[$"Unique name"]</th>
                <th scope="col" class="col-6">@Translator[$"Mail address"]</th>
                <th scope="col"></th>
                <th scope="col"></th>
                <th scope="col"></th>
            </tr>
            </thead>

            <tbody>
                @foreach (var identity in _identities.Values)
            {
                <tr>
                        <td>@identity.UniqueName</td>
                        <td>@identity.MailAddress</td>
                        <td>
                            <button class="btn btn-sm btn-outline-warning btn-block" title="@Translator[$"Reset"]"
                                    @onclick="() => ResetAsync(identity)"><span class="oi oi-action-undo"/></button>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-outline-info btn-block" title="@Translator[$"Edit"]"
                                    @onclick="() => Edit(identity.UniqueName)"><span class="oi oi-pencil"/></button>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-outline-danger btn-block" title="@Translator[$"Delete"]"
                                    @onclick="() => DeleteAsync(identity)"><span class="oi oi-trash"/></button>
                        </td>

                    </tr>
            }
            </tbody>
        </table>
}
</div>

@code {

private IDictionary<string,IdentityResponse>? _identities;

private IDictionary<string,bool>? _identitiesTextVisibile;

protected override async Task OnAfterRenderAsync(bool firstRender)
{
if (firstRender)
{
_identities = new Dictionary<string, IdentityResponse>();

var response = IdentityHandler.GetAll();

await foreach (var identity in response)
{
    _identities.Add(identity.UniqueName, identity);
    StateHasChanged();
}

_identitiesTextVisibile = _identities.Keys
    .ToDictionary(key => key, _ => false);

StateHasChanged();
}
}

public void Create()
=> NavigationManager.NavigateTo("/identities/create");

public void Edit(string identity)
=> NavigationManager.NavigateTo($"/identities/{identity}/edit");

public async Task DeleteAsync(IdentityResponse identity)
{
await IdentityHandler.DeleteAsync(identity.UniqueName, identity.ETag);
_identities!.Remove(identity.UniqueName);
}

public async Task ResetAsync(IdentityResponse identity) 
{
var reponse = await AuthenticationHandler.ResetAsync(identity.UniqueName, identity.ETag);
identity.ETag = reponse.ETag;
}
}