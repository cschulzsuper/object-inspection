@page "/identities/{identity}/edit"

@inject ITranslator<Edit> Translator
@inject NavigationManager NavigationManager
@inject IIdentityRequestHandler IdentityHandler

@attribute [Authorize("OnlyMaintainer")]

<PageTitle>@Translator[$"Edit identity"]</PageTitle>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">@Translator[$"Edit identity"]</h1>
</div>

@if (_request == null)
{
    <p><em>Loading...</em></p>
}
else 
{
    <EditForm Model="@_request" OnValidSubmit="@OnValidSubmitAsync">
        <DataAnnotationsValidator />

        <div class="container-fluid pb-3 mb-3 border-bottom">
            <div class="form-floating mt-3">
                <InputText class="form-control" id="identityUniqueName" @bind-Value="_request.UniqueName" readonly />
                <label for="identityUniqueName">@Translator[$"Unique name"]</label>
            </div>
            <div class="form-floating mt-3">
                <InputText class="form-control" id="identityMailAddress" @bind-Value="_request.MailAddress" />
                <label for="identityMailAddress">@Translator[$"Mail address"]</label>
            </div>
        </div>

        @if (context.GetValidationMessages().Any())
        {
            <div class="container-fluid pb-4 mb-5">
                <div class="card card-body tex-wrap">
                    <ValidationSummary/>
                </div>
            </div>
        }
        else
        {
            <div class="container-fluid pb-4 mb-5">
                <button type="submit" class="btn btn-sm btn-primary">@Translator[$"Submit"]</button>
            </div>
        }

    </EditForm>
}

@code {

[Parameter]
public string Identity { get; set; } = string.Empty;

private IdentityRequest? _request = null;

protected override async Task OnAfterRenderAsync(bool firstRender)
{
if (firstRender)
{
    var response = await IdentityHandler.GetAsync(Identity);

    _request = new IdentityRequest
        {
            MailAddress = response.MailAddress,
            UniqueName = response.UniqueName,
            ETag = response.ETag
        };

    StateHasChanged();
}
}

private async Task OnValidSubmitAsync()
{
await IdentityHandler.ReplaceAsync(Identity, _request!);
NavigationManager.NavigateTo("/identities");
}
}