@page "/identities/create"
@using Super.Paula.Application.Authentication
@using Super.Paula.Application.Authentication.Requests

@inject ITranslator<Create> Translator
@inject NavigationManager NavigationManager
@inject IIdentityRequestHandler IdentityRequestHandler

@attribute [Authorize("OnlyMaintainer")]

<PageTitle>@Translator[$"Create identity"]</PageTitle>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">@Translator[$"Create identity"]</h1>
</div>

<EditForm Model="@_request" OnValidSubmit="@OnValidSubmitAsync">
    <DataAnnotationsValidator />

    <div class="container-fluid pb-3 mb-3 border-bottom">
        <div class="form-floating mt-3">
            <InputText class="form-control" id="identityDisplayName" @bind-Value="_request.UniqueName" />
            <label for="identityUniqueName">@Translator[$"Unique name"]</label>
        </div>
        <div class="form-floating mt-3">
            <InputText class="form-control" id="identityUniqueName" @bind-Value="_request.MailAddress" />
            <label for="identityDisplayName">@Translator[$"Mail address"]</label>
        </div>
    </div>

    @if (context.GetValidationMessages().Any())
    {
        <div class="container-fluid pb-4 mb-5">
            <div class="card card-body tex-wrap">
                <ValidationSummary/>
            </div>
        </div>
    }
    else
    {
        <div class="container-fluid pb-4 mb-5">
            <button type="submit" class="btn btn-primary">@Translator[$"Submit"]</button>
        </div>
    }]

</EditForm>

@code {
    private IdentityRequest _request = new IdentityRequest();

    private async Task OnValidSubmitAsync()
    {
        await IdentityRequestHandler.CreateAsync(_request);
        NavigationManager.NavigateTo("/identities");
    }
}