@page "/extensions"

@inject ITranslator<View> Translator
@inject NavigationManager NavigationManager
@inject IExtensionRequestHandler ExtensionRequestHandler

@attribute [Authorize("OnlyChiefOrObserver")]

<PageTitle>@Translator[$"Extensions"]</PageTitle>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">@Translator[$"Extensions"]</h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <div class="btn-group me-2">
            <button type="button" class="btn btn-sm btn-outline-secondary" title="@Translator[$"Create"]" @onclick="@Create"><span class="oi oi-plus" /></button>
        </div>
    </div>
</div>

<DemoNote>
    @Translator.Markdown($"An extension extends a type with additional fields. The fields color or shape could be added to the bussiness object type.")
</DemoNote>

<div class="table-responsive">

    @if (_extensions == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table table-striped table-sm">
            <thead>
            <tr>
                <th scope="col" class="col-12">@Translator[$"Aggregate type"]</th>
                <th scope="col"></th>
                <th scope="col"></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var extension in _extensions.Values)
            {
                <tr>
                    <td>@extension.AggregateType</td>
                    <td>
                        <button class="btn btn-sm btn-outline-info btn-block" title="@Translator[$"Fields"]"
                                @onclick="() => NavigateToFields(extension.AggregateType)">
                            <span class="oi oi-list"/>
                        </button>
                    </td>
                    <td>
                        <button class="btn btn-sm btn-outline-danger btn-block" title="@Translator[$"Delete"]"
                                @onclick="() => DeleteAsync(extension)"><span class="oi oi-trash"/></button>
                    </td>

                </tr>
            }
            </tbody>
        </table>
    }

</div>

@code {

    private IDictionary<string, ExtensionResponse>? _extensions;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _extensions = new Dictionary<string, ExtensionResponse>();

            var response = ExtensionRequestHandler.GetAll();

            await foreach (var identity in response)
            {
                _extensions.Add(identity.AggregateType, identity);
                StateHasChanged();
            }

            StateHasChanged();
        }
    }

    public void Create()
        => NavigationManager.NavigateTo("/extensions/create");

    public async Task DeleteAsync(ExtensionResponse identity)
    {
        await ExtensionRequestHandler.DeleteAsync(identity.AggregateType, identity.ETag);
        _extensions!.Remove(identity.AggregateType);
    }

    public void NavigateToFields(string aggregateType)
        => NavigationManager.NavigateTo($"/extensions/{aggregateType}/fields");

}