@page "/notifications"

@inject ITranslator Translator
@inject NavigationManager NavigationManager
@inject INotificationHandler NotificationHandler
@inject AppAuthentication AppAuthentication

@implements IAsyncDisposable

@attribute [Authorize("RequiresAuditingViewability")]

<div class="container-fluid">
    <h1>@Translator["Notification"]</h1>
</div>

<div class="container-fluid">
@if (_notifications == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var notification in _notifications)
    {
        <div class="card mb-3">
            <div class="card-body">
                <h6 class="card-subtitle text-muted mb-1">@((notification.Date, notification.Time).ToLocalTimeString())</h6>
                <p class="card-text tex-wrap">@notification.Text</p>
                <AuthorizedButton Policy="RequiresAuditability" class="btn btn-primary" title="@Translator["Delete"]"
                    @onclick="() => RemoveAsync(notification)"><span class="oi oi-trash"/></AuthorizedButton>
            </div>
        </div>
    }
}
</div>

@code {

    private ICollection<NotificationResponse>? _notifications;

    private IDisposable? _notificationHandlerOnCreation;
    private IDisposable? _notificationHandlerOnDeletion;

    protected override async Task OnParametersSetAsync()
    {          
        await QueryAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _notificationHandlerOnCreation = await NotificationHandler.OnCreationAsync(OnCreationAsync);
            _notificationHandlerOnDeletion = await NotificationHandler.OnDeletionAsync(OnDeletionAsync);
        }
    }

    public async Task QueryAsync()
    {
        _notifications = new List<NotificationResponse>();

        await foreach (var notification in NotificationHandler.GetAllForInspector(AppAuthentication.Inspector))
        {
            _notifications.Add(notification);
        }

        StateHasChanged();
    }

    public Task OnCreationAsync(NotificationResponse notification) 
        => InvokeAsync(QueryAsync);

    public Task OnDeletionAsync(string _, int __, int ___)
        => InvokeAsync(QueryAsync);

    public async ValueTask DisposeAsync()
    {
        _notificationHandlerOnCreation?.Dispose();
        _notificationHandlerOnDeletion?.Dispose();

        await ValueTask.CompletedTask;
    }

    public async Task RemoveAsync(NotificationResponse notification)
    {
        await NotificationHandler.DeleteAsync(notification.Inspector, notification.Date, notification.Time);
    }
}