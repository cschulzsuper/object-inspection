@page "/notifications"

@inject ITranslator<View> Translator
@inject NavigationManager NavigationManager
@inject INotificationCallbackHandler NotificationCallbackHandler
@inject INotificationRequestHandler NotificationRequestHandler
@implements IAsyncDisposable

@attribute [Authorize("OnlyInspectorOrObserver")]

<PageTitle>@Translator[$"Notification"]</PageTitle>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">@Translator[$"Notification"]</h1>
</div>

<DemoNote>
    @Translator.Markdown($"Notifications give information about changes related to the daily work.")
</DemoNote>

<div class="table-responsive">
@if (_notifications == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var notification in _notifications)
    {
        <div class="card mb-3">
            <div class="card-header text-end">
                <AuthorizedButton Policy="OnlyInspector"
                                  id="@($"delete-{notification.Date}-{notification.Time}")"
                                  class="btn btn-sm btn-close"
                                  title="@Translator[$"Delete"]"
                                  @onclick="() => RemoveAsync(notification)"/>
            </div>
            <div class="card-body">
                <h6 class="card-subtitle text-muted mb-1">@(new DateTimeNumbers(notification.Date, notification.Time).ToLocalDateTimeString())</h6>
                <p class="card-text tex-wrap">@notification.Text</p>
            </div>
        </div>
    }
}
</div>

@code {

    private ICollection<NotificationResponse>? _notifications;

    private IDisposable? _notificationCreation;
    private IDisposable? _notificationDeletion;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        await QueryAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _notificationCreation = await NotificationCallbackHandler.OnCreationAsync(OnCreationAsync);
            _notificationDeletion = await NotificationCallbackHandler.OnDeletionAsync(OnDeletionAsync);
        }
    }

    public async Task QueryAsync()
    {
        _notifications = new List<NotificationResponse>();

        var inspector = (await AuthenticationState).User.Claims.GetInspector();

        await foreach (var notification in NotificationRequestHandler.GetAllForInspector(inspector))
        {
            _notifications.Add(notification);
        }

        StateHasChanged();
    }

    public Task OnCreationAsync(NotificationResponse notification)
        => InvokeAsync(QueryAsync);

    public Task OnDeletionAsync(string _, int __, int ___)
        => InvokeAsync(QueryAsync);

    public async ValueTask DisposeAsync()
    {
        _notificationCreation?.Dispose();
        _notificationDeletion?.Dispose();

        await ValueTask.CompletedTask;
    }

    public async Task RemoveAsync(NotificationResponse notification)
    {
        await NotificationRequestHandler.DeleteAsync(
            notification.Inspector,
            notification.Date,
            notification.Time,
            notification.ETag);
    }
}