@page "/register-chief-inspector/{organization}"

@inject ITranslator Translator
@inject IOrganizationHandler OrganizationHandler
@inject NavigationManager NavigationManager

@attribute [Authorize]

<div class="container-fluid">
    <h1>@Translator[$"Inspector sign up"]</h1>
</div>

<EditForm Model="@_model" OnValidSubmit="@OnValidSubmitAsync">
    <DataAnnotationsValidator />

    <div class="container-fluid">
        <div class="form-group">
            <label>@Translator[$"Inspector"]</label>
            <InputText class="form-control" id="inspector" @bind-Value="_model.Inspector" />
        </div>
    </div>

    @if(context.GetValidationMessages().Any())
    {
        <div class="container-fluid">
            <div class="card card-body tex-wrap">
                <ValidationSummary />    
            </div>
        </div>
    } 
    else 
    {
        <div class="container-fluid">
            <button 
                id="submit"
                type="submit"
                class="btn btn-primary">@Translator[$"Submit"]</button>
        </div>
    }

</EditForm>

@code {

    private InitializeOrganizationRequest _model = new InitializeOrganizationRequest();

    [Parameter]
    public string Organization { get; set;  } = null!;

    private async Task OnValidSubmitAsync()
    {
        await OrganizationHandler.InitializeAsync(Organization, _model);
        NavigationManager.NavigateTo("/");
    }
}