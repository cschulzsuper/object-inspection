@page "/business-objects/auditing"

@inject ITranslator<Auditing> Translator
@inject NavigationManager NavigationManager
@inject IInspectorHandler InspectorHandler

@implements IAsyncDisposable

@attribute [Authorize("AuditingLimited")]

<DemoNote>
    @Translator.Markdown($"The auditing shows the business objects of an inspector. Indicators could be shown if schedules are provided and overdue.")
</DemoNote>

<div class="container-fluid">
    <h1>@Translator[$"Auditing"]</h1>
</div>

<div class="container-fluid">

@if (_businessObjects == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-sm">
        <thead class="table-light table-borderless">
            <tr>
                <th class="col-12 col-lg-4">@Translator[$"Business object"]</th>
                <th class="col-4 d-none d-lg-table-cell">@Translator[$"Planned audit time"]</th>
                <th class="col-4 d-none d-lg-table-cell">@Translator[$"Unique name"]</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var businessObject in _businessObjects)
            {
                <tr class="@TableRowCss(businessObject)">
                    <td><div>@businessObject.DisplayName</div><small class="d-lg-none">@PlannedAuditTime(businessObject)</small></td>
                    <td class="d-none d-lg-table-cell">@PlannedAuditTime(businessObject)</td>
                    <td class="d-none d-lg-table-cell">@businessObject.UniqueName</td>
                    <td>
                        <button class="btn btn-outline-primary btn-block" title="@Translator[$"Audit"]"
                                @onclick="() => NavigateToInspectionAudit(businessObject.UniqueName)"><span class="oi oi-media-play"/></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

</div>

@code {

    private ICollection<InspectorBusinessObjectResponse>? _businessObjects = null;

    private IDisposable? _inspectorHandlerOnBusinessObjectCreation;
    private IDisposable? _inspectorHandlerOnBusinessObjectUpdate;
    private IDisposable? _inspectorHandlerOnBusinessObjectDeletion;

    protected override async Task OnParametersSetAsync()
    {          
        await QueryAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _inspectorHandlerOnBusinessObjectCreation = await InspectorHandler.OnBusinessObjectCreationAsync(OnBusinessObjectCreation);
            _inspectorHandlerOnBusinessObjectUpdate = await InspectorHandler.OnBusinessObjectUpdateAsync(OnBusinessObjectUpdate);
            _inspectorHandlerOnBusinessObjectDeletion = await InspectorHandler.OnBusinessObjectDeletionAsync(OnBusinessObjectDeletion);
        }
    }

    public Task OnBusinessObjectCreation(string _, InspectorBusinessObjectResponse __) 
        => InvokeAsync(QueryAsync);

    public Task OnBusinessObjectUpdate(string _, InspectorBusinessObjectResponse __) 
        => InvokeAsync(QueryAsync);

    public Task OnBusinessObjectDeletion(string _, string __)
        => InvokeAsync(QueryAsync);

    private string TableRowCss(InspectorBusinessObjectResponse businessObject)
    {
        if (businessObject.AuditScheduleDelayed)
        {
            return "text-danger font-weight-bold";
        }

        if (businessObject.AuditSchedulePending)
        {
            return "text-success font-weight-bold";
        }

        return string.Empty;
    }

    private string PlannedAuditTime(InspectorBusinessObjectResponse businessObject)
    {
        if (businessObject.AuditSchedulePlannedAuditDate == default &&
            businessObject.AuditSchedulePlannedAuditTime == default)
        {
            return string.Empty;
        }

        return new DateTimeNumbers(businessObject.AuditSchedulePlannedAuditDate, businessObject.AuditSchedulePlannedAuditTime)
            .ToLocalDateTimeString();
    }

    public async Task QueryAsync()
    {
        var response = await InspectorHandler.GetCurrentAsync();

        _businessObjects = response.BusinessObjects
            .OrderBy(x => x.AuditSchedulePlannedAuditDate)
            .ThenBy(x => x.AuditSchedulePlannedAuditTime)
            .ToList();

        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        _inspectorHandlerOnBusinessObjectCreation?.Dispose();
        _inspectorHandlerOnBusinessObjectUpdate?.Dispose();
        _inspectorHandlerOnBusinessObjectDeletion?.Dispose();

        await ValueTask.CompletedTask;
    }

    public void NavigateToInspections(string businessObject)
        => NavigationManager.NavigateTo($"/business-objects/{businessObject}/inspections");
    
    public void NavigateToInspectionAudit(string businessObject)
        => NavigationManager.NavigateTo($"/business-objects/{businessObject}/audit");
}