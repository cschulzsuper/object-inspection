@inherits LayoutComponentBase

@inject IAccountHandler AccountHandler
@inject NavigationManager NavigationManager   
@inject AppEnvironment AppEnvironment
@inject AuthenticationStateManager AuthenticationStateManager
@inject ITranslator Translator

<div class="page">
    <div class="sidebar text-nowrap">
        <NavMenu />
    </div>
    <main>
        <div class="top-row px-4">
            <AuthorizeView Policy="Impersonator">
                <Authorized>
                    <button type="button" class="nav-link btn btn-secondary ml-3" title="@Translator["Stop impersonation"]"
                        @onclick="() => StopImpersonationAsync()">
                        <span class="oi oi-power-standby" aria-hidden="true"/></button>
                </Authorized>
            </AuthorizeView>

            <AuthorizeView>
                <Authorized>
                    @if(AppEnvironment.IsDevelopment)
                    {
                        <select class="btn btn-secondary ml-3 text-left" @onchange="e => AuthorizationFilterChanged(e.Value)" value="@_authorizationFilter">
                            <option value="">---</option>
                            <option value="Impersonator|Maintainer|Inspector|Chief|Observer">Maintainer</option>
                            <option value="Impersonator|Inspector|Chief|Observer">ChiefInspector</option>
                            <option value="Impersonator|Inspector|Observer">Inspector</option>
                        </select>
                    }

                    <NavLink class="nav-link" Match="NavLinkMatch.All" href="account/change-secret">
                        <span class="oi oi-person" aria-hidden="true"/>@Translator["Change Password"]</NavLink>

                    <button type="button" class="nav-link btn" title="@Translator["Sign out"]"
                            @onclick="() => SignOutAsync()">
                        <span class="oi oi-account-logout" aria-hidden="true"/></button>

                </Authorized>
            </AuthorizeView>
        </div>

        <article class="content px-4 text-nowrap">
            <ErrorBoundary @ref="errorBoundary">
                <ChildContent>
                    @Body             
                </ChildContent>
                <ErrorContent>
                    <div class="blazor-error-boundary">
                        <p>@context.Message</p>
                        @if(context is ProblemDetailsException problems && problems.Errors != null)
                        {
                            <ul>
                            @foreach(var problem in problems.Errors.SelectMany(x => x.Key))
                            {
                                <li>@problem</li>
                            }
                            </ul>
                        }
                    </div>
                </ErrorContent>
            </ErrorBoundary>
        </article>
    </main>
</div>

@code {

    private string _authorizationFilter = string.Empty;

    private ErrorBoundary? errorBoundary = null!;

    protected override void OnParametersSet()
    {
        errorBoundary?.Recover();
    }

    public async Task SignOutAsync()
    {
        await AccountHandler.SignOutInspectorAsync();
        NavigationManager.NavigateTo("/");
    }

    public async Task StopImpersonationAsync()
    {
        await AccountHandler.StopImpersonationAsync();
        NavigationManager.NavigateTo("/");
    }

    public async Task AuthorizationFilterChanged(object? value)
    {
        _authorizationFilter = ((string)value!);

        var authorizationFilter = _authorizationFilter
            .Split('|')
            .Where(x => !string.IsNullOrWhiteSpace(x))
            .ToArray();

        await AuthenticationStateManager.FilterAuthorizationAsync(authorizationFilter);
    }
}
