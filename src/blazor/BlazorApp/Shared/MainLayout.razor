@inherits LayoutComponentBase

@using ChristianSchulz.ObjectInspection.Application.Authentication
@implements IDisposable

@inject Application.Administration.IAuthorizationRequestHandler AuthorizationHandler
@inject IAuthenticationRequestHandler AuthenticationHandler

@inject NavigationManager NavigationManager   
@inject AppEnvironment AppEnvironment
@inject ITranslator<MainLayout> Translator
@inject ILocalStorage LocalStorage

<header class="navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0 shadow">
    <a class="navbar-brand col-md-3 col-lg-2 me-0 px-3" href="#">@Translator[$"Objektprüfung"]</a>
    <button class="navbar-toggler position-absolute d-md-none collapsed" type="button" @onclick="ToggleNavMenu" aria-controls="sidebarMenu" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="navbar-nav align-items-center">

        <AuthorizeView Policy="OnlyImpersonator">
            <Authorized>
                <a type="button" class="nav-link pe-3" title="@Translator[$"Stop impersonation"]"
                    @onclick="() => StopImpersonationAsync()">
                <span class="oi oi-power-standby" aria-hidden="true"/></a>
            </Authorized>
        </AuthorizeView>

        <AuthorizeView>
            <Authorized>
                <NavLink class="nav-link px-3" Match="NavLinkMatch.All" href="change-inspector" title="@Translator[$"Change Inspector"]">
                    <InspectorAvatar Size="32" Inspector="me"/>
                </NavLink>

                <SignOutButton class="nav-link pe-3" id="signOut" />

            </Authorized>
        </AuthorizeView>

    </div>
</header>

<div class="container-fluid">
    <div class="row">

        <NavMenu Collapsed="@_navMenuCollapsed" />

        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
            <ErrorBoundary @ref="errorBoundaryArticle">
                <ChildContent>
                    @Body             
                </ChildContent>
                <ErrorContent>
                    <div class="alert alert-danger">
                        <p>@Translate(context)</p>
                        @if(context is ProblemDetailsException problems && problems.Errors != null)
                    {
                        <ul>
                                @foreach(var problem in problems.Errors.SelectMany(x => x.Value))
                            {
                                <li>@problem</li>
                            }
                            </ul>
                    }
                        <p>
                            @if(context is HttpRequestException requestException && 
                            (requestException.StatusCode == HttpStatusCode.Unauthorized || 
                             requestException.StatusCode == HttpStatusCode.Forbidden))
                        {
                            <a class="alert-link" href="javascript:void(0);" @onclick=RecoverAndGoHome>@Translator[$"Go to Homepage"]</a>                                
                            <span> - </span>
                            <a class="alert-link" href="javascript:void(0);" @onclick=RecoverAndSignOutAsync>@Translator[$"Sign Out"]</a>                                
                            <span> - </span>
                        }
                            <a class="alert-link" href="javascript:void(0);" @onclick=Recover>@Translator[$"Try Again"]</a>
                        </p>
                    </div>
                </ErrorContent>
            </ErrorBoundary>
        </main>
    </div>
</div>

<Footer/>

@code {

private bool _navMenuCollapsed = true;

private ErrorBoundary? errorBoundaryArticle = null!;

protected override void OnInitialized()
{
    NavigationManager.LocationChanged += NavigationManagerOnLocationChanged;
}

public void Dispose()
{
    NavigationManager.LocationChanged -= NavigationManagerOnLocationChanged;
    GC.SuppressFinalize(true);
}

private void NavigationManagerOnLocationChanged(object? sender, LocationChangedEventArgs e)
{
    _navMenuCollapsed = true;
    StateHasChanged();
}

private void ToggleNavMenu()
{
    _navMenuCollapsed = !_navMenuCollapsed;
}

private void Recover()
{
    errorBoundaryArticle?.Recover();
}

private void RecoverAndGoHome()
{
    errorBoundaryArticle?.Recover();
    NavigationManager.NavigateTo("/", true);
}

private async Task RecoverAndSignOutAsync()
{
    await AuthenticationHandler.SignOutAsync();
    errorBoundaryArticle?.Recover();
    NavigationManager.NavigateTo("/", true);
}

private string Translate(Exception exception)
{
    if (exception is ProblemDetailsException problems &&
        problems.TitleFormat != null &&
        problems.TitleArguments != null)
    {
        return Translator[problems.TitleFormat, problems.TitleArguments];
    }

    return Translator[exception.Message];
}

public async Task StopImpersonationAsync()
{
    try
    {
        await AuthorizationHandler.StopImpersonationAsync();
    }
    catch (HttpRequestException e) when (e.StatusCode == HttpStatusCode.Unauthorized)
    {
        if (await LocalStorage.ContainKeyAsync("token"))
        {
            await LocalStorage.RemoveItemAsync("token");
        }
    }
    finally
    {
        NavigationManager.NavigateTo("/");
    }
}
}
