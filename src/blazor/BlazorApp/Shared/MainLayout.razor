@inherits LayoutComponentBase

@inject IAccountHandler AccountHandler
@inject IAuthenticationHandler AuthenticationHandler
@inject NavigationManager NavigationManager   
@inject AppEnvironment AppEnvironment
@inject ITranslator Translator
@inject ILocalStorage LocalStorage
@inject BuildInfo BuildInfo

<div class="page">
    <div class="sidebar text-nowrap">
        <NavMenu />
    </div>
    <main>
        <div class="top-row px-4">
            <AuthorizeView Policy="Impersonation">
                <Authorized>
                    <button type="button" class="nav-link btn btn-secondary ml-3" title="@Translator[$"Stop impersonation"]"
                        @onclick="() => StopImpersonationAsync()">
                        <span class="oi oi-power-standby" aria-hidden="true"/></button>
                </Authorized>
            </AuthorizeView>

            <AuthorizeView>
                <Authorized>
                    @if(AppEnvironment.IsDevelopment)
                    {
                        <select class="btn btn-secondary ml-3 text-left" @onchange="e => AuthorizationFilterChanged(e.Value)" value="@_authorizationFilter">
                            <option value="">---</option>
                            <option value="Impersonator|Maintainer|Inspector|Chief|Observer">Maintainer</option>
                            <option value="Impersonator|Inspector|Chief|Observer">Chief</option>
                            <option value="Impersonator|Inspector|Observer">Inspector</option>
                        </select>
                    }

                    <NavLink class="nav-link" Match="NavLinkMatch.All" href="change-secret">
                        <span class="oi oi-person" aria-hidden="true"/>@Translator[$"Change Password"]</NavLink>

                    <SignOutButton class="nav-link btn" id="signOut"/>

                </Authorized>
            </AuthorizeView>
        </div>

        <article class="content px-4 text-nowrap">
            <ErrorBoundary @ref="errorBoundaryArticle">
                <ChildContent>
                    @Body             
                </ChildContent>
                <ErrorContent>
                    <div class="alert alert-danger">
                        <p>@context.Message</p>
                        @if(context is ProblemDetailsException problems && problems.Errors != null)
                        {
                            <ul>
                            @foreach(var problem in problems.Errors.SelectMany(x => x.Key))
                            {
                                <li>@problem</li>
                            }
                            </ul>
                        }
                        <p>
                            @if(context is HttpRequestException requestException && 
                                (requestException.StatusCode == HttpStatusCode.Unauthorized || 
                                 requestException.StatusCode == HttpStatusCode.Forbidden))
                            {
                                 <a class="alert-link" href="javascript:void(0);" @onclick=RecoverAndGoHome>@Translator[$"Go to Homepage"]</a>                                
                                 <span> - </span>
                                 <a class="alert-link" href="javascript:void(0);" @onclick=RecoverAndSignOutAsync>@Translator[$"Sign Out"]</a>                                
                                 <span> - </span>
                            }
                            <a class="alert-link" href="javascript:void(0);" @onclick=Recover>@Translator[$"Try Again"]</a>
                        </p>
                    </div>
                </ErrorContent>
            </ErrorBoundary>
        </article>
    </main>
    <footer class="footer fixed-bottom">
        <div class="copyright">&copy; Copyright @DateTime.Now.Year 
             <a href="https://github.com/cschulzsuper">Christian Schulz</a>. 
             @if (_buildString != null) 
             {
                <span class="d-none d-md-inline-block">@_buildString.Value</span>
             }
        </div>
    </footer>
</div>

@code {

    private string _authorizationFilter = string.Empty;

    private MarkupString? _buildString = null;

    private ErrorBoundary? errorBoundaryArticle = null!;

    protected override void OnInitialized()
    {
        GenerateBuildString();

        base.OnInitialized();
    }

    private void Recover()
    {
        errorBoundaryArticle?.Recover();
    }

    private void RecoverAndGoHome()
    {
        errorBoundaryArticle?.Recover();
        NavigationManager.NavigateTo("/", true);
    }

    private async Task RecoverAndSignOutAsync()
    {
        await AuthenticationHandler.SignOutAsync();
        errorBoundaryArticle?.Recover();
        NavigationManager.NavigateTo("/", true);
    }

    public async Task StopImpersonationAsync()
    {
        try
        {
            await AccountHandler.StopImpersonationAsync();
        }
        catch(HttpRequestException e) when (e.StatusCode == HttpStatusCode.Unauthorized)
        {
            if ((await LocalStorage.ContainKeyAsync("token")) ||
                (await LocalStorage.ContainKeyAsync("authorization-filter")))
            {
                await LocalStorage.RemoveItemAsync("token");
                await LocalStorage.RemoveItemAsync("authorization-filter");
            }
        } 
        finally
        {
            NavigationManager.NavigateTo("/");
        }
    }

    public async Task AuthorizationFilterChanged(object? value)
    {
        _authorizationFilter = ((string)value!);

        var authorizationFilter = _authorizationFilter
            .Split('|')
            .Where(x => !string.IsNullOrWhiteSpace(x))
            .ToArray();

        await LocalStorage.SetItemAsync("authorization-filter", authorizationFilter);
    }

    private void GenerateBuildString()
    {
        if (_buildString != null )
        {
            return;
        }

        var makeRuntimeString =
           !string.IsNullOrWhiteSpace(BuildInfo.Runtime);

        var makeCommitString = makeRuntimeString &&
            !string.IsNullOrWhiteSpace(BuildInfo.Branch) &&
            !string.IsNullOrWhiteSpace(BuildInfo.Hash) &&
            !string.IsNullOrWhiteSpace(BuildInfo.ShortHash);

        var makeBuildString = makeCommitString &&
            !string.IsNullOrWhiteSpace(BuildInfo.Build);

        if(makeBuildString)
        {
            _buildString = Translator.Markdown(
                $@"Powered by {BuildInfo.Runtime}, 
deployed from [{BuildInfo.Branch}](https://github.com/cschulzsuper/paula/tree/{BuildInfo.Branch}) 
commit [{BuildInfo.ShortHash}](https://github.com/cschulzsuper/paula/commit/{BuildInfo.Hash}) 
via build [{BuildInfo.Build}](https://github.com/cschulzsuper/paula/actions/runs/{BuildInfo.Build}).");

            return;
        }

        if(makeCommitString)
        {
            _buildString = Translator.Markdown(
                $@"Powered by {BuildInfo.Runtime} and 
deployed from [{BuildInfo.Branch}](https://github.com/cschulzsuper/paula/tree/{BuildInfo.Branch}) 
commit [{BuildInfo.ShortHash}](https://github.com/cschulzsuper/paula/commit/{BuildInfo.Hash}).");

            return;
        }

        if(makeCommitString)
        {
            _buildString = Translator.Markdown($"Powered by {BuildInfo.Runtime}.");
            return;
        }
    }
}
