@inject INotificationHandler NotificationHandler
@inject AppAuthentication AppAuthentication
@inject AppEnvironment AppEnvironment

@implements IAsyncDisposable

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">Paula</a>
    <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <AuthorizeView>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" Match="NavLinkMatch.All" href="account/sign-in">
                        <span class="oi oi-account-login" aria-hidden="true"></span> Sign in
                    </NavLink>
                </div>
                @if (AppEnvironment.IsDevelopment)
                {
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" Match="NavLinkMatch.All" href="account/register">
                            <span class="oi oi-person" aria-hidden="true"></span> Sign up
                        </NavLink>
                    </div>
                }
            </NotAuthorized>
        </AuthorizeView>
        <AuthorizeView Policy="Maintainer">
            <Authorized >
                <div class="nav-item px-3">
                    <NavLink class="nav-link" Match="NavLinkMatch.All" href="organizations">
                        <span class="oi oi-people" aria-hidden="true"></span> Organizations
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" Match="NavLinkMatch.All" href="identities">
                        <span class="oi oi-credit-card" aria-hidden="true"></span> Identities
                    </NavLink>
                </div>
                <hr/>
            </Authorized>
        </AuthorizeView>
        <AuthorizeView Policy="ChiefInspector">
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" Match="NavLinkMatch.All" href="inspectors">
                        <span class="oi oi-person" aria-hidden="true"></span> Inspectors
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" Match="NavLinkMatch.All" href="business-objects">
                        <span class="oi oi-briefcase" aria-hidden="true"></span> Business Objects
                    </NavLink>
                </div>
            </Authorized>
        </AuthorizeView>
        <AuthorizeView Policy="Inspector">
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" Match="NavLinkMatch.All" href="business-objects/auditing">
                        <span class="oi oi-clipboard" aria-hidden="true"></span> Auditing
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" Match="NavLinkMatch.All" href="notifications">
                        <span class="oi oi-bell" aria-hidden="true"></span> Notifications
                        @if (_notificationCount > 0)
                        {
                            <span class="badge badge-danger ml-2">@_notificationCount</span>
                        }
                    </NavLink>
                </div>
            </Authorized>
        </AuthorizeView>
        <AuthorizeView Policy="ChiefInspector">
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" Match="NavLinkMatch.All" href="inspections">
                        <span class="oi oi-list" aria-hidden="true"></span> Inspections
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" Match="NavLinkMatch.All" href="audit-history">
                        <span class="oi oi-clipboard" aria-hidden="true"></span> Audit History
                    </NavLink>
                </div>
                <hr/>
            </Authorized>
        </AuthorizeView>
    </nav>
</div>

@code {

    private IDisposable? _notificationHandlerOnCreated;
    private IDisposable? _notificationHandlerOnDeleted;

    private long? _notificationCount;

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    protected override async Task OnParametersSetAsync()
    {          
        if (authenticationStateTask != null) 
            await authenticationStateTask;

        await InitializeNotificationCounter();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _notificationHandlerOnCreated = await NotificationHandler.OnCreatedAsync(OnCreatedAsync);
            _notificationHandlerOnDeleted = await NotificationHandler.OnDeletedAsync(OnDeletedAsync);
        }
    }

    public async Task InitializeNotificationCounter()
    {
        _notificationCount = 0;

        if (AppAuthentication.Authorizations.Any())
        {
            await foreach (var _ in NotificationHandler.GetAllForInspector(AppAuthentication.Inspector))
            {
                _notificationCount++;
                StateHasChanged();
            }
        }
    }

    public Task OnCreatedAsync(NotificationResponse _)
        => InvokeAsync(IncrementNotifications);

    public Task OnDeletedAsync(string _, int __, int ___)
        => InvokeAsync(DecrementNotifications);

    private void IncrementNotifications()
    {
        _notificationCount++;
        StateHasChanged();
    }

    private void DecrementNotifications()
    {
        _notificationCount--;
        StateHasChanged();
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    public ValueTask DisposeAsync()
    {
        _notificationHandlerOnCreated?.Dispose();
        return ValueTask.CompletedTask;
    }
}
