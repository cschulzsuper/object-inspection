@page "/business-objects/{businessObject}/audit"

@using Super.Paula.Web.Shared.Localization
@using Super.Paula.Web.Shared.Handling.Responses

@inject ITranslator Translator
@inject NavigationManager NavigationManager
@inject IInspectionHandler InspectionHandler
@inject IBusinessObjectHandler BusinessObjectHandler
@inject AppState AppState

@attribute [Authorize("Inspector")]

<div class="container mt-2 mt-md-3">
    <h1>@Translator["Inspections"]</h1>
</div>

<div class="container mt-2 mt-md-3">

@if (_businessObject == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>@Translator["Inspection"]</th>
                <th>@Translator["Result"]</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var inspection in _businessObject.Inspections)
            {
                <tr>
                    <td class="col-8">
                        <button class="btn btn-outline-secondary btn-block text-left" 
                                @onclick="() => ToggleTextVisibility(inspection.Inspection)">@inspection.InspectionDisplayName</button>

                        @if (_inspectionsTextVisibile?[inspection.Inspection] == true && !string.IsNullOrWhiteSpace(inspection.InspectionText))
                        {
                            <div class="card card-body text-wrap">
                                @inspection.InspectionText
                            </div>
                        }
                    </td>
                    <td class="col-2">
                    @switch(inspection.AuditResult) 
                    {
                        case "satisfying":
                            <button class="btn btn-success btn-block" 
                                @onclick="() => ToggleAsync(inspection.Inspection)">@Translator["Satisfying"]</button>
                             break;
                        case "insufficient": 
                            <button class="btn btn-warning btn-block" 
                                @onclick="() => ToggleAsync(inspection.Inspection)">@Translator["Insufficient"]</button>
                            break;
                        case "failed": 
                            <button class="btn btn-danger btn-block" 
                                @onclick="() => ToggleAsync(inspection.Inspection)">@Translator["Failed"]</button>
                            break;
                        default: 
                            <button class="btn btn-secondary btn-block" 
                                @onclick="() => ToggleAsync(inspection.Inspection)">@Translator["Unset"]</button>
                            break;
                    } 
                    </td>                   
                    <td class="col-2">
                        <button class="btn btn-outline-primary btn-block" 
                            @onclick="() => NavigateToAnnotationAsync(inspection.Inspection)">@Translator["Annotation"]</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

</div>

@code {

    private IDictionary<string,bool>? _inspectionsTextVisibile;

    private BusinessObjectResponse? _businessObject;

    [Parameter]
    public string BusinessObject { get; set; } = null!;

    protected override Task OnInitializedAsync()
    {
        return QueryAsync();
    }

    public async Task QueryAsync()
    {
        _businessObject = await BusinessObjectHandler.GetAsync(BusinessObject);

        _inspectionsTextVisibile = _businessObject.Inspections
            .ToDictionary(x => x.Inspection, _ => false);
    }

    private void ToggleTextVisibility(string inspection)
    {
        if (_inspectionsTextVisibile != null)
        {
            _inspectionsTextVisibile[inspection] = !_inspectionsTextVisibile[inspection];
        }
    }

    private async Task ToggleAsync(string inspection)
    {
        var utcNow = DateTime.UtcNow;
        var inspectionItem = _businessObject!.Inspections.Single(x => x.Inspection == inspection);
        var inspectionToOld = inspectionItem.AuditDate < (DateOnly.FromDateTime(utcNow).DayNumber - 1);

        if (!inspectionToOld)
        {
            var nextResult = new Dictionary<string,string>
            {
                ["satisfying"] = "insufficient",
                ["insufficient"] = "failed",
                ["failed"] = "satisfying"
            };

            var request = new ChangeInspectionAuditRequest
            {
                Result = nextResult[inspectionItem.AuditResult]
            };

            await BusinessObjectHandler.ChangeInspectionAuditAsync(
                _businessObject.UniqueName, inspection, request);

            inspectionItem.AuditResult = request.Result;
        }
        else
        {
            var request = new CreateInspectionAuditRequest
            {
                Inspection = inspection,
                AuditDate = DateOnly.FromDateTime(utcNow).DayNumber,
                AuditTime = (int)utcNow.TimeOfDay.TotalMilliseconds,
                Result = "satisfying"
            };

             await BusinessObjectHandler.CreateInspectionAuditAsync(
                _businessObject.UniqueName, request);

            inspectionItem.AuditDate = request.AuditDate;
            inspectionItem.AuditTime = request.AuditTime;
            inspectionItem.AuditResult = request.Result;
        }
    }

    private void NavigateToAnnotationAsync(string inspection)
    {
        var inspectionItem = _businessObject!.Inspections.Single(x => x.Inspection == inspection);
        NavigationManager.NavigateTo($"/perform-inspection-audits/{_businessObject.UniqueName}/{inspectionItem.Inspection}/{inspectionItem.AuditDate}/{inspectionItem.AuditTime}/annotation");
    }
}