@page "/business-objects/{businessObject}/inspections"

@using Super.Paula.Web.Shared.Localization
@using Super.Paula.Web.Shared.Handling.Responses

@inject ITranslator Translator
@inject NavigationManager NavigationManager
@inject IInspectionHandler InspectionHandler
@inject IBusinessObjectHandler BusinessObjectHandler
@inject IAccountHandler AccountHandler

@attribute [Authorize("Inspector")]

<div class="container mt-2 mt-md-3">
    <h1>@Translator["Inspections"]</h1>
</div>

<AuthorizeView Policy="ChiefInspector">
    <Authorized>
        <div class="container mt-2 mt-md-3">
            <div class="custom-control custom-switch mr-4">
                <input type="checkbox" class="custom-control-input" checked="@_onlyAssigned" id="onlyAssigned" @onchange="OnlyAssignedChangedAsync">
                <label class="custom-control-label" for="onlyAssigned">@Translator["Only assigned"]</label>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

<div class="container mt-2 mt-md-3">

@if (RelevantInspections == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>@Translator["Unique name"]</th>
                <th>@Translator["Display name"]</th>
                <AuthorizeView Policy="ChiefInspector">
                    <Authorized>
                        <th></th>
                        <th></th>
                    </Authorized>
                </AuthorizeView>
            </tr>
        </thead>
        <tbody>
            @foreach (var inspection in RelevantInspections)
            {
                <tr>
                    <td class="col-2">@inspection.UniqueName</td>
                    <td class="col-8">@inspection.DisplayName</td>
                    <AuthorizeView Policy="ChiefInspector">
                        <Authorized>
                            @if(_inspectionBusinessObjects!.ContainsKey(inspection.UniqueName)) {
                                <td class="col-1">
                                    <button class="btn btn-primary btn-block" 
                                        @onclick="() => UnassignAsync(inspection.UniqueName)">@Translator["Unassign"]</button>
                                </td>
                            } else {
                                <td class="col-1">
                                    <button class="btn btn-outline-primary btn-block" 
                                        @onclick="() => AssignAsync(inspection.UniqueName)">@Translator["Assign"]</button>
                                </td>
                            }
                        </Authorized>
                    </AuthorizeView>
                </tr>
            }
        </tbody>
    </table>
}

</div>

@code {

    [Parameter]
    public string BusinessObject { get; set; } = null!;

    private IDictionary<string,InspectionResponse>? _inspectionBusinessObjects;

    private IDictionary<string,InspectionResponse>? _inspections;

    private bool _onlyAssigned = true;

    public IEnumerable<InspectionResponse>? RelevantInspections
        => _onlyAssigned
            ? _inspectionBusinessObjects?.Values
            : _inspections?.Values;

    protected override Task OnInitializedAsync()
        => QueryAsync();

    public async Task QueryAsync()
    {
        var authorizations = (await AccountHandler.QueryAuthorizationsAsync()).Values;

        _inspections = new Dictionary<string,InspectionResponse>();

        if(authorizations.Contains("ChiefInspector"))
        {
            var inspectionResponse = InspectionHandler.GetAll();  
            
            await foreach (var inspection in inspectionResponse)
            {
                _inspections!.Add(inspection.UniqueName, inspection);
                this.StateHasChanged();
            }
        }


        var response = await BusinessObjectHandler.GetAsync(BusinessObject);

        _inspectionBusinessObjects = new Dictionary<string,InspectionResponse>();

        foreach (var inspection in response.Inspections)
        {
            _inspectionBusinessObjects!.Add(inspection.UniqueName, new InspectionResponse
            {
                Activated = false,
                DisplayName = inspection.DisplayName,
                Text = inspection.Text,
                UniqueName = inspection.UniqueName
            });

            this.StateHasChanged();
        }
    }

    public Task OnlyAssignedChangedAsync(ChangeEventArgs e)
    {
        _onlyAssigned = (bool)e.Value!;
        return Task.CompletedTask;
    }

    public async Task AssignAsync(string inspection)
    {
        await BusinessObjectHandler.AssignInspectionAsync(
            BusinessObject!,
            new AssignInspectionRequest
            {
                Activated = true,
                UniqueName = inspection
            });

        _inspectionBusinessObjects!.Add(inspection, _inspections![inspection]);
    }

    public async Task UnassignAsync(string inspection)
    {
        await BusinessObjectHandler.CancelInspectionAsync(
            BusinessObject!,
            new CancelInspectionRequest
            {
                UniqueName = inspection
            });

        _inspectionBusinessObjects!.Remove(inspection);
    }
}